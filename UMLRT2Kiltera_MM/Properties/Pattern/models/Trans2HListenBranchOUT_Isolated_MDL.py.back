"""
__Trans2HListenBranchOUT_Isolated_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: gehan
Modified: Mon Mar  9 11:40:10 2015
_____________________________________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from LHS import *
from MT_pre__Signal import *
from MT_pre__SIBLING0 import *
from MT_pre__Transition import *
from MT_pre__Trigger_S import *
from graph_MT_pre__SIBLING0 import *
from graph_MT_pre__Trigger_S import *
from graph_MT_pre__Signal import *
from graph_MT_pre__Transition import *
from graph_LHS import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def Trans2HListenBranchOUT_Isolated_MDL(self, rootNode, MT_pre__UMLRT2Kiltera_MMRootNode=None, MoTifRuleRootNode=None):

    # --- Generating attributes code for ASG MT_pre__UMLRT2Kiltera_MM ---
    if( MT_pre__UMLRT2Kiltera_MMRootNode ): 
        # author
        MT_pre__UMLRT2Kiltera_MMRootNode.author.setValue('Annonymous')

        # description
        MT_pre__UMLRT2Kiltera_MMRootNode.description.setValue('\n')
        MT_pre__UMLRT2Kiltera_MMRootNode.description.setHeight(15)

        # name
        MT_pre__UMLRT2Kiltera_MMRootNode.name.setValue('')
        MT_pre__UMLRT2Kiltera_MMRootNode.name.setNone()
    # --- ASG attributes over ---


    # --- Generating attributes code for ASG MoTifRule ---
    if( MoTifRuleRootNode ): 
        # author
        MoTifRuleRootNode.author.setValue('Annonymous')

        # description
        MoTifRuleRootNode.description.setValue('\n')
        MoTifRuleRootNode.description.setHeight(15)

        # name
        MoTifRuleRootNode.name.setValue('Trans2HListenBranchOUT_Isolated')
    # --- ASG attributes over ---


    self.obj73835=LHS(self)
    self.obj73835.isGraphObjectVisual = True

    if(hasattr(self.obj73835, '_setHierarchicalLink')):
      self.obj73835._setHierarchicalLink(False)

    # constraint
    self.obj73835.constraint.setValue('#===============================================================================\n# This code is executed after the nodes in the LHS have been matched.\n# You can access a matched node labelled n by: PreNode(\'n\').\n# To access attribute x of node n, use: PreNode(\'n\')[\'x\'].\n# The given constraint must evaluate to a boolean expression:\n#    returning True enables the rule to be applied,\n#    returning False forbids the rule from being applied.\n#===============================================================================\n\nreturn True\n')
    self.obj73835.constraint.setHeight(15)

    self.obj73835.graphClass_= graph_LHS
    if self.genGraphics:
       new_obj = graph_LHS(20.0,20.0,self.obj73835)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("LHS", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj73835.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj73835)
    self.globalAndLocalPostcondition(self.obj73835, rootNode)
    self.obj73835.postAction( rootNode.CREATE )

    self.obj73836=MT_pre__Signal(self)
    self.obj73836.isGraphObjectVisual = True

    if(hasattr(self.obj73836, '_setHierarchicalLink')):
      self.obj73836._setHierarchicalLink(False)

    # MT_label__
    self.obj73836.MT_label__.setValue('4')

    # MT_pivotOut__
    self.obj73836.MT_pivotOut__.setValue('element4')

    # MT_subtypeMatching__
    self.obj73836.MT_subtypeMatching__.setValue(('True', 0))
    self.obj73836.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj73836.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73836.MT_pre__classtype.setHeight(15)

    # MT_pre__cardinality
    self.obj73836.MT_pre__cardinality.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73836.MT_pre__cardinality.setHeight(15)

    # MT_pre__name
    self.obj73836.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73836.MT_pre__name.setHeight(15)

    # MT_pivotIn__
    self.obj73836.MT_pivotIn__.setValue('')
    self.obj73836.MT_pivotIn__.setNone()

    self.obj73836.graphClass_= graph_MT_pre__Signal
    if self.genGraphics:
       new_obj = graph_MT_pre__Signal(240.0,200.0,self.obj73836)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__Signal", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj73836.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj73836)
    self.globalAndLocalPostcondition(self.obj73836, rootNode)
    self.obj73836.postAction( rootNode.CREATE )

    self.obj73837=MT_pre__SIBLING0(self)
    self.obj73837.isGraphObjectVisual = True

    if(hasattr(self.obj73837, '_setHierarchicalLink')):
      self.obj73837._setHierarchicalLink(False)

    # MT_label__
    self.obj73837.MT_label__.setValue('2')

    # MT_pivotOut__
    self.obj73837.MT_pivotOut__.setValue('element2')

    # MT_subtypeMatching__
    self.obj73837.MT_subtypeMatching__.setValue(('True', 0))
    self.obj73837.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj73837.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73837.MT_pre__classtype.setHeight(15)

    # MT_pre__cardinality
    self.obj73837.MT_pre__cardinality.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73837.MT_pre__cardinality.setHeight(15)

    # MT_pre__name
    self.obj73837.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73837.MT_pre__name.setHeight(15)

    # MT_pivotIn__
    self.obj73837.MT_pivotIn__.setValue('')
    self.obj73837.MT_pivotIn__.setNone()

    self.obj73837.graphClass_= graph_MT_pre__SIBLING0
    if self.genGraphics:
       new_obj = graph_MT_pre__SIBLING0(60.0,220.0,self.obj73837)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__SIBLING0", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj73837.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj73837)
    self.globalAndLocalPostcondition(self.obj73837, rootNode)
    self.obj73837.postAction( rootNode.CREATE )

    self.obj73838=MT_pre__Transition(self)
    self.obj73838.isGraphObjectVisual = True

    if(hasattr(self.obj73838, '_setHierarchicalLink')):
      self.obj73838._setHierarchicalLink(False)

    # MT_pivotOut__
    self.obj73838.MT_pivotOut__.setValue('element1')

    # MT_subtypeMatching__
    self.obj73838.MT_subtypeMatching__.setValue(('True', 0))
    self.obj73838.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj73838.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73838.MT_pre__classtype.setHeight(15)

    # MT_pivotIn__
    self.obj73838.MT_pivotIn__.setValue('')
    self.obj73838.MT_pivotIn__.setNone()

    # MT_label__
    self.obj73838.MT_label__.setValue('1')

    # MT_pre__cardinality
    self.obj73838.MT_pre__cardinality.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73838.MT_pre__cardinality.setHeight(15)

    # MT_pre__name
    self.obj73838.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73838.MT_pre__name.setHeight(15)

    self.obj73838.graphClass_= graph_MT_pre__Transition
    if self.genGraphics:
       new_obj = graph_MT_pre__Transition(40.0,40.0,self.obj73838)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__Transition", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj73838.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj73838)
    self.globalAndLocalPostcondition(self.obj73838, rootNode)
    self.obj73838.postAction( rootNode.CREATE )

    self.obj73839=MT_pre__Trigger_S(self)
    self.obj73839.isGraphObjectVisual = True

    if(hasattr(self.obj73839, '_setHierarchicalLink')):
      self.obj73839._setHierarchicalLink(False)

    # MT_label__
    self.obj73839.MT_label__.setValue('3')

    # MT_pivotOut__
    self.obj73839.MT_pivotOut__.setValue('element3')

    # MT_subtypeMatching__
    self.obj73839.MT_subtypeMatching__.setValue(('True', 0))
    self.obj73839.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj73839.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73839.MT_pre__classtype.setHeight(15)

    # MT_pre__cardinality
    self.obj73839.MT_pre__cardinality.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73839.MT_pre__cardinality.setHeight(15)

    # MT_pre__name
    self.obj73839.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj73839.MT_pre__name.setHeight(15)

    # MT_pivotIn__
    self.obj73839.MT_pivotIn__.setValue('')
    self.obj73839.MT_pivotIn__.setNone()

    self.obj73839.graphClass_= graph_MT_pre__Trigger_S
    if self.genGraphics:
       new_obj = graph_MT_pre__Trigger_S(220.0,80.0,self.obj73839)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__Trigger_S", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj73839.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj73839)
    self.globalAndLocalPostcondition(self.obj73839, rootNode)
    self.obj73839.postAction( rootNode.CREATE )

    # Connections for obj73835 (graphObject_: Obj59) of type LHS
    self.drawConnections(
 )
    # Connections for obj73836 (graphObject_: Obj60) of type MT_pre__Signal
    self.drawConnections(
 )
    # Connections for obj73837 (graphObject_: Obj61) of type MT_pre__SIBLING0
    self.drawConnections(
 )
    # Connections for obj73838 (graphObject_: Obj62) of type MT_pre__Transition
    self.drawConnections(
 )
    # Connections for obj73839 (graphObject_: Obj63) of type MT_pre__Trigger_S
    self.drawConnections(
 )

newfunction = Trans2HListenBranchOUT_Isolated_MDL

loadedMMName = ['MT_pre__UMLRT2Kiltera_MM_META', 'MoTifRule_META']

atom3version = '0.3'
