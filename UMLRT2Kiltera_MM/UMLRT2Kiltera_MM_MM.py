"""
__UMLRT2Kiltera_MM_MM.py______________________________________________________

Automatically generated AToM3 MetaModel (DO NOT MODIFY DIRECTLY)
Author: gehan
Modified: Sat Aug 30 18:23:46 2014
______________________________________________________________________________
"""
from ASG_UMLRT2Kiltera_MM import *
from graph_ASG_ERmetaMetaModel import *
from Tkinter         import *
from ATOM3TypeInfo   import *
from ATOM3String     import *
from StatusBar       import *
from ATOM3TypeDialog import *

from MatchModel       import *
from ApplyModel       import *
from MetaModelElement_S       import *
from MetaModelElement_T       import *
from Element       import *
from NamedElement       import *
from Trigger_S       import *
from Action       import *
from PortRef       import *
from PortConnectorRef       import *
from StateMachineElement       import *
from Protocol       import *
from Signal       import *
from Port       import *
from Vertex       import *
from InitialPoint       import *
from EntryPoint       import *
from ExitPoint       import *
from Transition       import *
from StateMachine       import *
from State       import *
from Capsule       import *
from PackageContainer       import *
from Model_S       import *
from Package       import *
from CapsuleRole       import *
from PortConnector       import *
from Thread       import *
from PhysicalThread       import *
from LogicalThread       import *
from PortType       import *
from BASE0       import *
from CONJUGATE1       import *
from SignalType       import *
from OUT1       import *
from IN0       import *
from RoleType       import *
from FIXED0       import *
from OPTIONAL1       import *
from PLUGIN2       import *
from TransitionType       import *
from SIBLING0       import *
from IN1       import *
from OUT2       import *
from Def       import *
from Expr       import *
from Pattern       import *
from Proc       import *
from ProcDef       import *
from FuncDef       import *
from Name       import *
from PythonRef       import *
from Module       import *
from Null       import *
from Trigger_T       import *
from Listen       import *
from ConditionBranch       import *
from ListenBranch       import *
from Site       import *
from Model_T       import *
from MatchCase       import *
from Condition       import *
from New       import *
from Delay       import *
from Par       import *
from ParIndexed       import *
from Inst       import *
from LocalDef       import *
from Seq       import *
from ConditionSet       import *
from Match       import *
from Print       import *
from Attribute       import *
from Expression       import *
from Equation       import *
from Operation       import *
from Add       import *
from Subtract       import *
from Concat       import *
from Constant       import *
from paired_with       import *
from match_contains       import *
from apply_contains       import *
from directLink_T       import *
from directLink_S       import *
from indirectLink_S       import *
from backward_link       import *
from trace_link       import *
from hasAttribute_S       import *
from hasAttribute_T       import *
from leftExpr       import *
from rightExpr       import *
from hasArgs       import *
def createNewASGroot(self):
   return ASG_UMLRT2Kiltera_MM(self, None)

def createModelMenu(self, modelMenu):
    "Creates a customized Model Menu for the actual formalism"
    modelMenu.add_command(label="New MatchModel", command=lambda x=self: x.createNewMatchModel(x, 100, 100) )
    modelMenu.add_command(label="New ApplyModel", command=lambda x=self: x.createNewApplyModel(x, 100, 100) )
    modelMenu.add_command(label="New MetaModelElement_S", command=lambda x=self: x.createNewMetaModelElement_S(x, 100, 100) )
    modelMenu.add_command(label="New MetaModelElement_T", command=lambda x=self: x.createNewMetaModelElement_T(x, 100, 100) )
    modelMenu.add_command(label="New Element", command=lambda x=self: x.createNewElement(x, 100, 100) )
    modelMenu.add_command(label="New NamedElement", command=lambda x=self: x.createNewNamedElement(x, 100, 100) )
    modelMenu.add_command(label="New Trigger_S", command=lambda x=self: x.createNewTrigger_S(x, 100, 100) )
    modelMenu.add_command(label="New Action", command=lambda x=self: x.createNewAction(x, 100, 100) )
    modelMenu.add_command(label="New PortRef", command=lambda x=self: x.createNewPortRef(x, 100, 100) )
    modelMenu.add_command(label="New PortConnectorRef", command=lambda x=self: x.createNewPortConnectorRef(x, 100, 100) )
    modelMenu.add_command(label="New StateMachineElement", command=lambda x=self: x.createNewStateMachineElement(x, 100, 100) )
    modelMenu.add_command(label="New Protocol", command=lambda x=self: x.createNewProtocol(x, 100, 100) )
    modelMenu.add_command(label="New Signal", command=lambda x=self: x.createNewSignal(x, 100, 100) )
    modelMenu.add_command(label="New Port", command=lambda x=self: x.createNewPort(x, 100, 100) )
    modelMenu.add_command(label="New Vertex", command=lambda x=self: x.createNewVertex(x, 100, 100) )
    modelMenu.add_command(label="New InitialPoint", command=lambda x=self: x.createNewInitialPoint(x, 100, 100) )
    modelMenu.add_command(label="New EntryPoint", command=lambda x=self: x.createNewEntryPoint(x, 100, 100) )
    modelMenu.add_command(label="New ExitPoint", command=lambda x=self: x.createNewExitPoint(x, 100, 100) )
    modelMenu.add_command(label="New Transition", command=lambda x=self: x.createNewTransition(x, 100, 100) )
    modelMenu.add_command(label="New StateMachine", command=lambda x=self: x.createNewStateMachine(x, 100, 100) )
    modelMenu.add_command(label="New State", command=lambda x=self: x.createNewState(x, 100, 100) )
    modelMenu.add_command(label="New Capsule", command=lambda x=self: x.createNewCapsule(x, 100, 100) )
    modelMenu.add_command(label="New PackageContainer", command=lambda x=self: x.createNewPackageContainer(x, 100, 100) )
    modelMenu.add_command(label="New Model_S", command=lambda x=self: x.createNewModel_S(x, 100, 100) )
    modelMenu.add_command(label="New Package", command=lambda x=self: x.createNewPackage(x, 100, 100) )
    modelMenu.add_command(label="New CapsuleRole", command=lambda x=self: x.createNewCapsuleRole(x, 100, 100) )
    modelMenu.add_command(label="New PortConnector", command=lambda x=self: x.createNewPortConnector(x, 100, 100) )
    modelMenu.add_command(label="New Thread", command=lambda x=self: x.createNewThread(x, 100, 100) )
    modelMenu.add_command(label="New PhysicalThread", command=lambda x=self: x.createNewPhysicalThread(x, 100, 100) )
    modelMenu.add_command(label="New LogicalThread", command=lambda x=self: x.createNewLogicalThread(x, 100, 100) )
    modelMenu.add_command(label="New PortType", command=lambda x=self: x.createNewPortType(x, 100, 100) )
    modelMenu.add_command(label="New BASE0", command=lambda x=self: x.createNewBASE0(x, 100, 100) )
    modelMenu.add_command(label="New CONJUGATE1", command=lambda x=self: x.createNewCONJUGATE1(x, 100, 100) )
    modelMenu.add_command(label="New SignalType", command=lambda x=self: x.createNewSignalType(x, 100, 100) )
    modelMenu.add_command(label="New OUT1", command=lambda x=self: x.createNewOUT1(x, 100, 100) )
    modelMenu.add_command(label="New IN0", command=lambda x=self: x.createNewIN0(x, 100, 100) )
    modelMenu.add_command(label="New RoleType", command=lambda x=self: x.createNewRoleType(x, 100, 100) )
    modelMenu.add_command(label="New FIXED0", command=lambda x=self: x.createNewFIXED0(x, 100, 100) )
    modelMenu.add_command(label="New OPTIONAL1", command=lambda x=self: x.createNewOPTIONAL1(x, 100, 100) )
    modelMenu.add_command(label="New PLUGIN2", command=lambda x=self: x.createNewPLUGIN2(x, 100, 100) )
    modelMenu.add_command(label="New TransitionType", command=lambda x=self: x.createNewTransitionType(x, 100, 100) )
    modelMenu.add_command(label="New SIBLING0", command=lambda x=self: x.createNewSIBLING0(x, 100, 100) )
    modelMenu.add_command(label="New IN1", command=lambda x=self: x.createNewIN1(x, 100, 100) )
    modelMenu.add_command(label="New OUT2", command=lambda x=self: x.createNewOUT2(x, 100, 100) )
    modelMenu.add_command(label="New Def", command=lambda x=self: x.createNewDef(x, 100, 100) )
    modelMenu.add_command(label="New Expr", command=lambda x=self: x.createNewExpr(x, 100, 100) )
    modelMenu.add_command(label="New Pattern", command=lambda x=self: x.createNewPattern(x, 100, 100) )
    modelMenu.add_command(label="New Proc", command=lambda x=self: x.createNewProc(x, 100, 100) )
    modelMenu.add_command(label="New ProcDef", command=lambda x=self: x.createNewProcDef(x, 100, 100) )
    modelMenu.add_command(label="New FuncDef", command=lambda x=self: x.createNewFuncDef(x, 100, 100) )
    modelMenu.add_command(label="New Name", command=lambda x=self: x.createNewName(x, 100, 100) )
    modelMenu.add_command(label="New PythonRef", command=lambda x=self: x.createNewPythonRef(x, 100, 100) )
    modelMenu.add_command(label="New Module", command=lambda x=self: x.createNewModule(x, 100, 100) )
    modelMenu.add_command(label="New Null", command=lambda x=self: x.createNewNull(x, 100, 100) )
    modelMenu.add_command(label="New Trigger_T", command=lambda x=self: x.createNewTrigger_T(x, 100, 100) )
    modelMenu.add_command(label="New Listen", command=lambda x=self: x.createNewListen(x, 100, 100) )
    modelMenu.add_command(label="New ConditionBranch", command=lambda x=self: x.createNewConditionBranch(x, 100, 100) )
    modelMenu.add_command(label="New ListenBranch", command=lambda x=self: x.createNewListenBranch(x, 100, 100) )
    modelMenu.add_command(label="New Site", command=lambda x=self: x.createNewSite(x, 100, 100) )
    modelMenu.add_command(label="New Model_T", command=lambda x=self: x.createNewModel_T(x, 100, 100) )
    modelMenu.add_command(label="New MatchCase", command=lambda x=self: x.createNewMatchCase(x, 100, 100) )
    modelMenu.add_command(label="New Condition", command=lambda x=self: x.createNewCondition(x, 100, 100) )
    modelMenu.add_command(label="New New", command=lambda x=self: x.createNewNew(x, 100, 100) )
    modelMenu.add_command(label="New Delay", command=lambda x=self: x.createNewDelay(x, 100, 100) )
    modelMenu.add_command(label="New Par", command=lambda x=self: x.createNewPar(x, 100, 100) )
    modelMenu.add_command(label="New ParIndexed", command=lambda x=self: x.createNewParIndexed(x, 100, 100) )
    modelMenu.add_command(label="New Inst", command=lambda x=self: x.createNewInst(x, 100, 100) )
    modelMenu.add_command(label="New LocalDef", command=lambda x=self: x.createNewLocalDef(x, 100, 100) )
    modelMenu.add_command(label="New Seq", command=lambda x=self: x.createNewSeq(x, 100, 100) )
    modelMenu.add_command(label="New ConditionSet", command=lambda x=self: x.createNewConditionSet(x, 100, 100) )
    modelMenu.add_command(label="New Match", command=lambda x=self: x.createNewMatch(x, 100, 100) )
    modelMenu.add_command(label="New Print", command=lambda x=self: x.createNewPrint(x, 100, 100) )
    modelMenu.add_command(label="New Attribute", command=lambda x=self: x.createNewAttribute(x, 100, 100) )
    modelMenu.add_command(label="New Expression", command=lambda x=self: x.createNewExpression(x, 100, 100) )
    modelMenu.add_command(label="New Equation", command=lambda x=self: x.createNewEquation(x, 100, 100) )
    modelMenu.add_command(label="New Operation", command=lambda x=self: x.createNewOperation(x, 100, 100) )
    modelMenu.add_command(label="New Add", command=lambda x=self: x.createNewAdd(x, 100, 100) )
    modelMenu.add_command(label="New Subtract", command=lambda x=self: x.createNewSubtract(x, 100, 100) )
    modelMenu.add_command(label="New Concat", command=lambda x=self: x.createNewConcat(x, 100, 100) )
    modelMenu.add_command(label="New Constant", command=lambda x=self: x.createNewConstant(x, 100, 100) )
    modelMenu.add_command(label="New paired_with", command=lambda x=self: x.createNewpaired_with(x, 100, 100) )
    modelMenu.add_command(label="New match_contains", command=lambda x=self: x.createNewmatch_contains(x, 100, 100) )
    modelMenu.add_command(label="New apply_contains", command=lambda x=self: x.createNewapply_contains(x, 100, 100) )
    modelMenu.add_command(label="New directLink_T", command=lambda x=self: x.createNewdirectLink_T(x, 100, 100) )
    modelMenu.add_command(label="New directLink_S", command=lambda x=self: x.createNewdirectLink_S(x, 100, 100) )
    modelMenu.add_command(label="New indirectLink_S", command=lambda x=self: x.createNewindirectLink_S(x, 100, 100) )
    modelMenu.add_command(label="New backward_link", command=lambda x=self: x.createNewbackward_link(x, 100, 100) )
    modelMenu.add_command(label="New trace_link", command=lambda x=self: x.createNewtrace_link(x, 100, 100) )
    modelMenu.add_command(label="New hasAttribute_S", command=lambda x=self: x.createNewhasAttribute_S(x, 100, 100) )
    modelMenu.add_command(label="New hasAttribute_T", command=lambda x=self: x.createNewhasAttribute_T(x, 100, 100) )
    modelMenu.add_command(label="New leftExpr", command=lambda x=self: x.createNewleftExpr(x, 100, 100) )
    modelMenu.add_command(label="New rightExpr", command=lambda x=self: x.createNewrightExpr(x, 100, 100) )
    modelMenu.add_command(label="New hasArgs", command=lambda x=self: x.createNewhasArgs(x, 100, 100) )
def setConnectivity(self):
    self.ConnectivityMap['directLink_S']={
           'directLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['directLink_T']={
           'directLink_S': []
          ,'directLink_T': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['PortConnectorRef']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['SignalType']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['rightExpr']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': [( 'Operation', self.createNewOperation), ( 'Add', self.createNewAdd), ( 'Subtract', self.createNewSubtract), ( 'Concat', self.createNewConcat)]
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['FuncDef']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Match']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['hasAttribute_T']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Vertex']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['ApplyModel']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'apply_contains', self.createNewapply_contains)]
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': [( 'apply_contains', self.createNewapply_contains)]
          ,'ConditionBranch': [( 'apply_contains', self.createNewapply_contains)]
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': [( 'apply_contains', self.createNewapply_contains)]
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': [( 'apply_contains', self.createNewapply_contains)]
          ,'FuncDef': [( 'apply_contains', self.createNewapply_contains)]
          ,'State': []
          ,'paired_with': []
          ,'Print': [( 'apply_contains', self.createNewapply_contains)]
          ,'New': [( 'apply_contains', self.createNewapply_contains)]
          ,'Listen': [( 'apply_contains', self.createNewapply_contains)]
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': [( 'apply_contains', self.createNewapply_contains)]
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': [( 'apply_contains', self.createNewapply_contains)]
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'apply_contains', self.createNewapply_contains)]
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': [( 'apply_contains', self.createNewapply_contains)]
          ,'Inst': [( 'apply_contains', self.createNewapply_contains)]
          ,'Subtract': []
          ,'Condition': [( 'apply_contains', self.createNewapply_contains)]
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': [( 'apply_contains', self.createNewapply_contains)]
          ,'ProcDef': [( 'apply_contains', self.createNewapply_contains)]
          ,'Seq': [( 'apply_contains', self.createNewapply_contains)]
          ,'Attribute': []
          ,'Concat': []
          ,'Par': [( 'apply_contains', self.createNewapply_contains)]
          ,'ConditionSet': [( 'apply_contains', self.createNewapply_contains)]
          ,'Delay': [( 'apply_contains', self.createNewapply_contains)]
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'apply_contains', self.createNewapply_contains)]
          ,'CapsuleRole': []
          ,'LocalDef': [( 'apply_contains', self.createNewapply_contains)]
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': [( 'apply_contains', self.createNewapply_contains)]
          ,'Package': []
          ,'Expr': [( 'apply_contains', self.createNewapply_contains)]
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': [( 'apply_contains', self.createNewapply_contains)]
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': [( 'apply_contains', self.createNewapply_contains)]
          ,'Module': [( 'apply_contains', self.createNewapply_contains)]
          ,'trace_link': []
          ,'ParIndexed': [( 'apply_contains', self.createNewapply_contains)]
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Capsule']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['hasArgs']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': [( 'Operation', self.createNewOperation), ( 'Add', self.createNewAdd), ( 'Subtract', self.createNewSubtract), ( 'Concat', self.createNewConcat)]
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['LocalDef']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Thread']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['LogicalThread']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['match_contains']={
           'directLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Protocol']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['PythonRef']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['ConditionBranch']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Operation']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': [( 'hasArgs', self.createNewhasArgs)]
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': [( 'hasArgs', self.createNewhasArgs)]
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': [( 'hasArgs', self.createNewhasArgs)]
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': [( 'hasArgs', self.createNewhasArgs)]
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasArgs', self.createNewhasArgs)]
          ,'Concat': [( 'hasArgs', self.createNewhasArgs)]
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': [( 'hasArgs', self.createNewhasArgs)]
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['NamedElement']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['OUT2']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Pattern']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['PortRef']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['IN0']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['IN1']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['MatchCase']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['hasAttribute_S']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['State']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['paired_with']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': [( 'ApplyModel', self.createNewApplyModel)]
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Print']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['New']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Listen']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['TransitionType']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['indirectLink_S']={
           'directLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Trigger_S']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Trigger_T']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['RoleType']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Equation']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': [( 'leftExpr', self.createNewleftExpr), ( 'rightExpr', self.createNewrightExpr)]
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': [( 'leftExpr', self.createNewleftExpr), ( 'rightExpr', self.createNewrightExpr)]
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': [( 'leftExpr', self.createNewleftExpr), ( 'rightExpr', self.createNewrightExpr)]
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': [( 'leftExpr', self.createNewleftExpr), ( 'rightExpr', self.createNewrightExpr)]
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'leftExpr', self.createNewleftExpr), ( 'rightExpr', self.createNewrightExpr)]
          ,'Concat': [( 'leftExpr', self.createNewleftExpr), ( 'rightExpr', self.createNewrightExpr)]
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': [( 'leftExpr', self.createNewleftExpr), ( 'rightExpr', self.createNewrightExpr)]
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['PLUGIN2']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['MatchModel']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'match_contains', self.createNewmatch_contains)]
          ,'SignalType': [( 'match_contains', self.createNewmatch_contains)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'match_contains', self.createNewmatch_contains)]
          ,'ApplyModel': [( 'paired_with', self.createNewpaired_with)]
          ,'Capsule': [( 'match_contains', self.createNewmatch_contains)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'match_contains', self.createNewmatch_contains)]
          ,'Thread': [( 'match_contains', self.createNewmatch_contains)]
          ,'LogicalThread': [( 'match_contains', self.createNewmatch_contains)]
          ,'match_contains': []
          ,'Protocol': [( 'match_contains', self.createNewmatch_contains)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'match_contains', self.createNewmatch_contains)]
          ,'OUT2': [( 'match_contains', self.createNewmatch_contains)]
          ,'Pattern': []
          ,'PortRef': [( 'match_contains', self.createNewmatch_contains)]
          ,'IN0': [( 'match_contains', self.createNewmatch_contains)]
          ,'IN1': [( 'match_contains', self.createNewmatch_contains)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'match_contains', self.createNewmatch_contains)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'match_contains', self.createNewmatch_contains)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'match_contains', self.createNewmatch_contains)]
          ,'Trigger_T': []
          ,'RoleType': [( 'match_contains', self.createNewmatch_contains)]
          ,'Equation': []
          ,'PLUGIN2': [( 'match_contains', self.createNewmatch_contains)]
          ,'MatchModel': []
          ,'BASE0': [( 'match_contains', self.createNewmatch_contains)]
          ,'Null': []
          ,'InitialPoint': [( 'match_contains', self.createNewmatch_contains)]
          ,'OUT1': [( 'match_contains', self.createNewmatch_contains)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'match_contains', self.createNewmatch_contains)]
          ,'FIXED0': [( 'match_contains', self.createNewmatch_contains)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'match_contains', self.createNewmatch_contains)]
          ,'PhysicalThread': [( 'match_contains', self.createNewmatch_contains)]
          ,'Transition': [( 'match_contains', self.createNewmatch_contains)]
          ,'Action': [( 'match_contains', self.createNewmatch_contains)]
          ,'PortType': [( 'match_contains', self.createNewmatch_contains)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'match_contains', self.createNewmatch_contains)]
          ,'ExitPoint': [( 'match_contains', self.createNewmatch_contains)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'match_contains', self.createNewmatch_contains)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'match_contains', self.createNewmatch_contains)]
          ,'CONJUGATE1': [( 'match_contains', self.createNewmatch_contains)]
          ,'Name': []
          ,'Package': [( 'match_contains', self.createNewmatch_contains)]
          ,'Expr': []
          ,'Signal': [( 'match_contains', self.createNewmatch_contains)]
          ,'Element': [( 'match_contains', self.createNewmatch_contains)]
          ,'Model_S': [( 'match_contains', self.createNewmatch_contains)]
          ,'Model_T': []
          ,'SIBLING0': [( 'match_contains', self.createNewmatch_contains)]
          ,'PackageContainer': [( 'match_contains', self.createNewmatch_contains)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'match_contains', self.createNewmatch_contains)]
          ,'PortConnector': [( 'match_contains', self.createNewmatch_contains)] }
    self.ConnectivityMap['BASE0']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Null']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['InitialPoint']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['OUT1']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['apply_contains']={
           'directLink_S': []
          ,'directLink_T': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': [( 'MetaModelElement_T', self.createNewMetaModelElement_T), ( 'Def', self.createNewDef), ( 'Expr', self.createNewExpr), ( 'Pattern', self.createNewPattern), ( 'Proc', self.createNewProc), ( 'ProcDef', self.createNewProcDef), ( 'FuncDef', self.createNewFuncDef), ( 'Name', self.createNewName), ( 'PythonRef', self.createNewPythonRef), ( 'Module', self.createNewModule), ( 'Null', self.createNewNull), ( 'Trigger_T', self.createNewTrigger_T), ( 'Listen', self.createNewListen), ( 'ConditionBranch', self.createNewConditionBranch), ( 'ListenBranch', self.createNewListenBranch), ( 'Site', self.createNewSite), ( 'Model_T', self.createNewModel_T), ( 'MatchCase', self.createNewMatchCase), ( 'Condition', self.createNewCondition), ( 'New', self.createNewNew), ( 'Delay', self.createNewDelay), ( 'Par', self.createNewPar), ( 'ParIndexed', self.createNewParIndexed), ( 'Inst', self.createNewInst), ( 'LocalDef', self.createNewLocalDef), ( 'Seq', self.createNewSeq), ( 'ConditionSet', self.createNewConditionSet), ( 'Match', self.createNewMatch), ( 'Print', self.createNewPrint)]
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Add']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': [( 'hasArgs', self.createNewhasArgs)]
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': [( 'hasArgs', self.createNewhasArgs)]
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': [( 'hasArgs', self.createNewhasArgs)]
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': [( 'hasArgs', self.createNewhasArgs)]
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasArgs', self.createNewhasArgs)]
          ,'Concat': [( 'hasArgs', self.createNewhasArgs)]
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': [( 'hasArgs', self.createNewhasArgs)]
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Proc']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['StateMachine']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['FIXED0']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['ListenBranch']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Inst']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Subtract']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': [( 'hasArgs', self.createNewhasArgs)]
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': [( 'hasArgs', self.createNewhasArgs)]
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': [( 'hasArgs', self.createNewhasArgs)]
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': [( 'hasArgs', self.createNewhasArgs)]
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasArgs', self.createNewhasArgs)]
          ,'Concat': [( 'hasArgs', self.createNewhasArgs)]
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': [( 'hasArgs', self.createNewhasArgs)]
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Condition']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['OPTIONAL1']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['PhysicalThread']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Transition']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Action']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['PortType']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Expression']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Def']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['ProcDef']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Seq']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Attribute']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Concat']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': [( 'hasArgs', self.createNewhasArgs)]
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': [( 'hasArgs', self.createNewhasArgs)]
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': [( 'hasArgs', self.createNewhasArgs)]
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': [( 'hasArgs', self.createNewhasArgs)]
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasArgs', self.createNewhasArgs)]
          ,'Concat': [( 'hasArgs', self.createNewhasArgs)]
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': [( 'hasArgs', self.createNewhasArgs)]
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['Par']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Site']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Delay']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['StateMachineElement']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['ExitPoint']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['backward_link']={
           'directLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['leftExpr']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': [( 'Operation', self.createNewOperation), ( 'Add', self.createNewAdd), ( 'Subtract', self.createNewSubtract), ( 'Concat', self.createNewConcat)]
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['MetaModelElement_T']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['CapsuleRole']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['MetaModelElement_S']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['trace_link']={
           'directLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': [( 'MetaModelElement_S', self.createNewMetaModelElement_S), ( 'Element', self.createNewElement), ( 'NamedElement', self.createNewNamedElement), ( 'Trigger_S', self.createNewTrigger_S), ( 'Action', self.createNewAction), ( 'PortRef', self.createNewPortRef), ( 'PortConnectorRef', self.createNewPortConnectorRef), ( 'StateMachineElement', self.createNewStateMachineElement), ( 'Protocol', self.createNewProtocol), ( 'Signal', self.createNewSignal), ( 'Port', self.createNewPort), ( 'Vertex', self.createNewVertex), ( 'InitialPoint', self.createNewInitialPoint), ( 'EntryPoint', self.createNewEntryPoint), ( 'ExitPoint', self.createNewExitPoint), ( 'Transition', self.createNewTransition), ( 'StateMachine', self.createNewStateMachine), ( 'State', self.createNewState), ( 'Capsule', self.createNewCapsule), ( 'PackageContainer', self.createNewPackageContainer), ( 'Model_S', self.createNewModel_S), ( 'Package', self.createNewPackage), ( 'CapsuleRole', self.createNewCapsuleRole), ( 'PortConnector', self.createNewPortConnector), ( 'Thread', self.createNewThread), ( 'PhysicalThread', self.createNewPhysicalThread), ( 'LogicalThread', self.createNewLogicalThread), ( 'PortType', self.createNewPortType), ( 'BASE0', self.createNewBASE0), ( 'CONJUGATE1', self.createNewCONJUGATE1), ( 'SignalType', self.createNewSignalType), ( 'OUT1', self.createNewOUT1), ( 'IN0', self.createNewIN0), ( 'RoleType', self.createNewRoleType), ( 'FIXED0', self.createNewFIXED0), ( 'OPTIONAL1', self.createNewOPTIONAL1), ( 'PLUGIN2', self.createNewPLUGIN2), ( 'TransitionType', self.createNewTransitionType), ( 'SIBLING0', self.createNewSIBLING0), ( 'IN1', self.createNewIN1), ( 'OUT2', self.createNewOUT2)]
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['CONJUGATE1']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Name']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Package']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Expr']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Signal']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Element']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Model_S']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Model_T']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['SIBLING0']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['PackageContainer']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['Constant']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': []
          ,'SignalType': []
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': []
          ,'ApplyModel': []
          ,'Capsule': []
          ,'hasArgs': []
          ,'MetaModelElement_S': []
          ,'Thread': []
          ,'LogicalThread': []
          ,'match_contains': []
          ,'Protocol': []
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': []
          ,'OUT2': []
          ,'Pattern': []
          ,'PortRef': []
          ,'IN0': []
          ,'IN1': []
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': []
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': []
          ,'indirectLink_S': []
          ,'Trigger_S': []
          ,'Trigger_T': []
          ,'RoleType': []
          ,'Equation': []
          ,'PLUGIN2': []
          ,'MatchModel': []
          ,'BASE0': []
          ,'Null': []
          ,'InitialPoint': []
          ,'OUT1': []
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': []
          ,'FIXED0': []
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': []
          ,'PhysicalThread': []
          ,'Transition': []
          ,'Action': []
          ,'PortType': []
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': []
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': []
          ,'ExitPoint': []
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': []
          ,'LocalDef': []
          ,'EntryPoint': []
          ,'CONJUGATE1': []
          ,'Name': []
          ,'Package': []
          ,'Expr': []
          ,'Signal': []
          ,'Element': []
          ,'Model_S': []
          ,'Model_T': []
          ,'SIBLING0': []
          ,'PackageContainer': []
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': []
          ,'PortConnector': [] }
    self.ConnectivityMap['ConditionSet']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Module']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['EntryPoint']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['ParIndexed']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'SignalType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'hasAttribute_T': []
          ,'Vertex': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ApplyModel': []
          ,'Capsule': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Thread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LogicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'match_contains': []
          ,'Protocol': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PythonRef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Operation': []
          ,'NamedElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Pattern': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'PortRef': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'IN1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchCase': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'FuncDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'State': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'paired_with': []
          ,'Print': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'New': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Listen': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'TransitionType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Trigger_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'RoleType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Equation': []
          ,'PLUGIN2': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'MatchModel': []
          ,'BASE0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Null': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'InitialPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'OUT1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachine': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'FIXED0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ListenBranch': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Inst': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Subtract': []
          ,'Condition': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'OPTIONAL1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PhysicalThread': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Transition': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Action': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortType': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expression': []
          ,'Def': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ProcDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Seq': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Attribute': [( 'hasAttribute_T', self.createNewhasAttribute_T)]
          ,'Concat': []
          ,'Par': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'ConditionSet': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Delay': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'StateMachineElement': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'ExitPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'CapsuleRole': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'LocalDef': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'EntryPoint': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'CONJUGATE1': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Name': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Package': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Expr': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Signal': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Element': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_S': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Model_T': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'SIBLING0': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PackageContainer': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'Constant': []
          ,'Site': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Module': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'trace_link': []
          ,'ParIndexed': [( 'directLink_T', self.createNewdirectLink_T)]
          ,'Port': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)]
          ,'PortConnector': [( 'backward_link', self.createNewbackward_link), ( 'trace_link', self.createNewtrace_link)] }
    self.ConnectivityMap['Port']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    self.ConnectivityMap['PortConnector']={
           'directLink_S': []
          ,'directLink_T': []
          ,'PortConnectorRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'SignalType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'leftExpr': []
          ,'hasAttribute_S': []
          ,'Match': []
          ,'hasAttribute_T': []
          ,'Vertex': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ApplyModel': []
          ,'Capsule': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'hasArgs': []
          ,'MetaModelElement_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Thread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LogicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'match_contains': []
          ,'Protocol': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PythonRef': []
          ,'ConditionBranch': []
          ,'Operation': []
          ,'NamedElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Pattern': []
          ,'PortRef': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'IN1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchCase': []
          ,'FuncDef': []
          ,'State': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'paired_with': []
          ,'Print': []
          ,'New': []
          ,'Listen': []
          ,'TransitionType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'indirectLink_S': []
          ,'Trigger_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Trigger_T': []
          ,'RoleType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Equation': []
          ,'PLUGIN2': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'MatchModel': []
          ,'BASE0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Null': []
          ,'InitialPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'OUT1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'apply_contains': []
          ,'Add': []
          ,'Proc': []
          ,'StateMachine': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'FIXED0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ListenBranch': []
          ,'Inst': []
          ,'Subtract': []
          ,'Condition': []
          ,'OPTIONAL1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PhysicalThread': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Transition': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Action': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortType': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expression': []
          ,'Def': []
          ,'ProcDef': []
          ,'Seq': []
          ,'Attribute': [( 'hasAttribute_S', self.createNewhasAttribute_S)]
          ,'Concat': []
          ,'Par': []
          ,'ConditionSet': []
          ,'Delay': []
          ,'StateMachineElement': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'ExitPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'backward_link': []
          ,'rightExpr': []
          ,'MetaModelElement_T': []
          ,'CapsuleRole': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'LocalDef': []
          ,'EntryPoint': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'CONJUGATE1': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Name': []
          ,'Package': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Expr': []
          ,'Signal': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Element': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_S': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Model_T': []
          ,'SIBLING0': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PackageContainer': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'Constant': []
          ,'Site': []
          ,'Module': []
          ,'trace_link': []
          ,'ParIndexed': []
          ,'Port': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)]
          ,'PortConnector': [( 'directLink_S', self.createNewdirectLink_S), ( 'indirectLink_S', self.createNewindirectLink_S)] }
    
    self.CardinalityTable['MatchModel']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': [('1', '1', 'Source')]
          ,'match_contains': [('0', 'N', 'Source')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['ApplyModel']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': [('1', '1', 'Destination')]
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Source')]
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['MetaModelElement_S']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['MetaModelElement_T']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Element']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['NamedElement']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Trigger_S']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Action']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PortRef']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PortConnectorRef']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['StateMachineElement']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Protocol']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Signal']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Port']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Vertex']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['InitialPoint']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['EntryPoint']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['ExitPoint']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Transition']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['StateMachine']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['State']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Capsule']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PackageContainer']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Model_S']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Package']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['CapsuleRole']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PortConnector']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Thread']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PhysicalThread']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['LogicalThread']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PortType']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['BASE0']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['CONJUGATE1']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['SignalType']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['OUT1']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['IN0']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['RoleType']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['FIXED0']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['OPTIONAL1']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PLUGIN2']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['TransitionType']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['SIBLING0']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['IN1']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['OUT2']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'indirectLink_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'backward_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'trace_link': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasAttribute_S': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Def']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Expr']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Pattern']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Proc']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['ProcDef']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['FuncDef']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Name']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['PythonRef']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Module']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Null']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Trigger_T']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Listen']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['ConditionBranch']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['ListenBranch']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Site']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Model_T']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['MatchCase']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Condition']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['New']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Delay']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Par']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['ParIndexed']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Inst']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['LocalDef']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Seq']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['ConditionSet']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Match']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Print']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'directLink_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'trace_link': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'hasAttribute_S': []
          ,'hasAttribute_T': [('0', 'N', 'Source'), ('0', 'N', 'Source')]
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['Attribute']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': [('0', 'N', 'Destination')]
          ,'hasAttribute_T': [('0', 'N', 'Destination')]
          ,'leftExpr': [('0', 'N', 'Destination')]
          ,'rightExpr': [('0', 'N', 'Destination')]
          ,'hasArgs': [('0', 'N', 'Destination')] }
    self.CardinalityTable['Expression']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': [('0', 'N', 'Destination')]
          ,'rightExpr': [('0', 'N', 'Destination')]
          ,'hasArgs': [('0', 'N', 'Destination')] }
    self.CardinalityTable['Equation']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': [('0', 'N', 'Source')]
          ,'rightExpr': [('0', 'N', 'Source')]
          ,'hasArgs': [] }
    self.CardinalityTable['Operation']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': [('0', 'N', 'Destination')]
          ,'rightExpr': [('0', 'N', 'Destination')]
          ,'hasArgs': [('0', 'N', 'Destination'), ('0', 'N', 'Source')] }
    self.CardinalityTable['Add']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'rightExpr': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasArgs': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Source')] }
    self.CardinalityTable['Subtract']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'rightExpr': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasArgs': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Source')] }
    self.CardinalityTable['Concat']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'rightExpr': [('0', 'N', 'Destination'), ('0', 'N', 'Destination')]
          ,'hasArgs': [('0', 'N', 'Destination'), ('0', 'N', 'Destination'), ('0', 'N', 'Source')] }
    self.CardinalityTable['Constant']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': [('0', 'N', 'Destination')]
          ,'rightExpr': [('0', 'N', 'Destination')]
          ,'hasArgs': [('0', 'N', 'Destination')] }
    self.CardinalityTable['paired_with']={
          'MatchModel': [('1', '1', 'Destination')]
          ,'ApplyModel': [('1', '1', 'Source')]
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['match_contains']={
          'MatchModel': [('0', 'N', 'Destination')]
          ,'ApplyModel': []
          ,'MetaModelElement_S': [('0', 'N', 'Source')]
          ,'MetaModelElement_T': []
          ,'Element': [('0', 'N', 'Source')]
          ,'NamedElement': [('0', 'N', 'Source')]
          ,'Trigger_S': [('0', 'N', 'Source')]
          ,'Action': [('0', 'N', 'Source')]
          ,'PortRef': [('0', 'N', 'Source')]
          ,'PortConnectorRef': [('0', 'N', 'Source')]
          ,'StateMachineElement': [('0', 'N', 'Source')]
          ,'Protocol': [('0', 'N', 'Source')]
          ,'Signal': [('0', 'N', 'Source')]
          ,'Port': [('0', 'N', 'Source')]
          ,'Vertex': [('0', 'N', 'Source')]
          ,'InitialPoint': [('0', 'N', 'Source')]
          ,'EntryPoint': [('0', 'N', 'Source')]
          ,'ExitPoint': [('0', 'N', 'Source')]
          ,'Transition': [('0', 'N', 'Source')]
          ,'StateMachine': [('0', 'N', 'Source')]
          ,'State': [('0', 'N', 'Source')]
          ,'Capsule': [('0', 'N', 'Source')]
          ,'PackageContainer': [('0', 'N', 'Source')]
          ,'Model_S': [('0', 'N', 'Source')]
          ,'Package': [('0', 'N', 'Source')]
          ,'CapsuleRole': [('0', 'N', 'Source')]
          ,'PortConnector': [('0', 'N', 'Source')]
          ,'Thread': [('0', 'N', 'Source')]
          ,'PhysicalThread': [('0', 'N', 'Source')]
          ,'LogicalThread': [('0', 'N', 'Source')]
          ,'PortType': [('0', 'N', 'Source')]
          ,'BASE0': [('0', 'N', 'Source')]
          ,'CONJUGATE1': [('0', 'N', 'Source')]
          ,'SignalType': [('0', 'N', 'Source')]
          ,'OUT1': [('0', 'N', 'Source')]
          ,'IN0': [('0', 'N', 'Source')]
          ,'RoleType': [('0', 'N', 'Source')]
          ,'FIXED0': [('0', 'N', 'Source')]
          ,'OPTIONAL1': [('0', 'N', 'Source')]
          ,'PLUGIN2': [('0', 'N', 'Source')]
          ,'TransitionType': [('0', 'N', 'Source')]
          ,'SIBLING0': [('0', 'N', 'Source')]
          ,'IN1': [('0', 'N', 'Source')]
          ,'OUT2': [('0', 'N', 'Source')]
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['apply_contains']={
          'MatchModel': []
          ,'ApplyModel': [('0', 'N', 'Destination')]
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': [('0', 'N', 'Source')]
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': [('0', 'N', 'Source')]
          ,'Expr': [('0', 'N', 'Source')]
          ,'Pattern': [('0', 'N', 'Source')]
          ,'Proc': [('0', 'N', 'Source')]
          ,'ProcDef': [('0', 'N', 'Source')]
          ,'FuncDef': [('0', 'N', 'Source')]
          ,'Name': [('0', 'N', 'Source')]
          ,'PythonRef': [('0', 'N', 'Source')]
          ,'Module': [('0', 'N', 'Source')]
          ,'Null': [('0', 'N', 'Source')]
          ,'Trigger_T': [('0', 'N', 'Source')]
          ,'Listen': [('0', 'N', 'Source')]
          ,'ConditionBranch': [('0', 'N', 'Source')]
          ,'ListenBranch': [('0', 'N', 'Source')]
          ,'Site': [('0', 'N', 'Source')]
          ,'Model_T': [('0', 'N', 'Source')]
          ,'MatchCase': [('0', 'N', 'Source')]
          ,'Condition': [('0', 'N', 'Source')]
          ,'New': [('0', 'N', 'Source')]
          ,'Delay': [('0', 'N', 'Source')]
          ,'Par': [('0', 'N', 'Source')]
          ,'ParIndexed': [('0', 'N', 'Source')]
          ,'Inst': [('0', 'N', 'Source')]
          ,'LocalDef': [('0', 'N', 'Source')]
          ,'Seq': [('0', 'N', 'Source')]
          ,'ConditionSet': [('0', 'N', 'Source')]
          ,'Match': [('0', 'N', 'Source')]
          ,'Print': [('0', 'N', 'Source')]
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['directLink_T']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Expr': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Pattern': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Proc': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'ProcDef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'FuncDef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Name': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PythonRef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Module': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Null': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Trigger_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Listen': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'ConditionBranch': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'ListenBranch': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Site': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Model_T': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'MatchCase': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Condition': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'New': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Delay': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Par': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'ParIndexed': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Inst': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'LocalDef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Seq': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'ConditionSet': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Match': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Print': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['directLink_S']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'MetaModelElement_T': []
          ,'Element': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'NamedElement': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Trigger_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Action': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortRef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortConnectorRef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'StateMachineElement': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Protocol': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Signal': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Port': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Vertex': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'InitialPoint': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'EntryPoint': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'ExitPoint': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Transition': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'StateMachine': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'State': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Capsule': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PackageContainer': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Model_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Package': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'CapsuleRole': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortConnector': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Thread': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PhysicalThread': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'LogicalThread': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'BASE0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'CONJUGATE1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'SignalType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'OUT1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'IN0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'RoleType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'FIXED0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'OPTIONAL1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PLUGIN2': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'TransitionType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'SIBLING0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'IN1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'OUT2': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['indirectLink_S']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'MetaModelElement_T': []
          ,'Element': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'NamedElement': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Trigger_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Action': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortRef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortConnectorRef': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'StateMachineElement': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Protocol': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Signal': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Port': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Vertex': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'InitialPoint': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'EntryPoint': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'ExitPoint': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Transition': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'StateMachine': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'State': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Capsule': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PackageContainer': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Model_S': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Package': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'CapsuleRole': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortConnector': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Thread': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PhysicalThread': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'LogicalThread': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PortType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'BASE0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'CONJUGATE1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'SignalType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'OUT1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'IN0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'RoleType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'FIXED0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'OPTIONAL1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'PLUGIN2': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'TransitionType': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'SIBLING0': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'IN1': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'OUT2': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['backward_link']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': [('0', 'N', 'Source')]
          ,'MetaModelElement_T': [('0', 'N', 'Destination')]
          ,'Element': [('0', 'N', 'Source')]
          ,'NamedElement': [('0', 'N', 'Source')]
          ,'Trigger_S': [('0', 'N', 'Source')]
          ,'Action': [('0', 'N', 'Source')]
          ,'PortRef': [('0', 'N', 'Source')]
          ,'PortConnectorRef': [('0', 'N', 'Source')]
          ,'StateMachineElement': [('0', 'N', 'Source')]
          ,'Protocol': [('0', 'N', 'Source')]
          ,'Signal': [('0', 'N', 'Source')]
          ,'Port': [('0', 'N', 'Source')]
          ,'Vertex': [('0', 'N', 'Source')]
          ,'InitialPoint': [('0', 'N', 'Source')]
          ,'EntryPoint': [('0', 'N', 'Source')]
          ,'ExitPoint': [('0', 'N', 'Source')]
          ,'Transition': [('0', 'N', 'Source')]
          ,'StateMachine': [('0', 'N', 'Source')]
          ,'State': [('0', 'N', 'Source')]
          ,'Capsule': [('0', 'N', 'Source')]
          ,'PackageContainer': [('0', 'N', 'Source')]
          ,'Model_S': [('0', 'N', 'Source')]
          ,'Package': [('0', 'N', 'Source')]
          ,'CapsuleRole': [('0', 'N', 'Source')]
          ,'PortConnector': [('0', 'N', 'Source')]
          ,'Thread': [('0', 'N', 'Source')]
          ,'PhysicalThread': [('0', 'N', 'Source')]
          ,'LogicalThread': [('0', 'N', 'Source')]
          ,'PortType': [('0', 'N', 'Source')]
          ,'BASE0': [('0', 'N', 'Source')]
          ,'CONJUGATE1': [('0', 'N', 'Source')]
          ,'SignalType': [('0', 'N', 'Source')]
          ,'OUT1': [('0', 'N', 'Source')]
          ,'IN0': [('0', 'N', 'Source')]
          ,'RoleType': [('0', 'N', 'Source')]
          ,'FIXED0': [('0', 'N', 'Source')]
          ,'OPTIONAL1': [('0', 'N', 'Source')]
          ,'PLUGIN2': [('0', 'N', 'Source')]
          ,'TransitionType': [('0', 'N', 'Source')]
          ,'SIBLING0': [('0', 'N', 'Source')]
          ,'IN1': [('0', 'N', 'Source')]
          ,'OUT2': [('0', 'N', 'Source')]
          ,'Def': [('0', 'N', 'Destination')]
          ,'Expr': [('0', 'N', 'Destination')]
          ,'Pattern': [('0', 'N', 'Destination')]
          ,'Proc': [('0', 'N', 'Destination')]
          ,'ProcDef': [('0', 'N', 'Destination')]
          ,'FuncDef': [('0', 'N', 'Destination')]
          ,'Name': [('0', 'N', 'Destination')]
          ,'PythonRef': [('0', 'N', 'Destination')]
          ,'Module': [('0', 'N', 'Destination')]
          ,'Null': [('0', 'N', 'Destination')]
          ,'Trigger_T': [('0', 'N', 'Destination')]
          ,'Listen': [('0', 'N', 'Destination')]
          ,'ConditionBranch': [('0', 'N', 'Destination')]
          ,'ListenBranch': [('0', 'N', 'Destination')]
          ,'Site': [('0', 'N', 'Destination')]
          ,'Model_T': [('0', 'N', 'Destination')]
          ,'MatchCase': [('0', 'N', 'Destination')]
          ,'Condition': [('0', 'N', 'Destination')]
          ,'New': [('0', 'N', 'Destination')]
          ,'Delay': [('0', 'N', 'Destination')]
          ,'Par': [('0', 'N', 'Destination')]
          ,'ParIndexed': [('0', 'N', 'Destination')]
          ,'Inst': [('0', 'N', 'Destination')]
          ,'LocalDef': [('0', 'N', 'Destination')]
          ,'Seq': [('0', 'N', 'Destination')]
          ,'ConditionSet': [('0', 'N', 'Destination')]
          ,'Match': [('0', 'N', 'Destination')]
          ,'Print': [('0', 'N', 'Destination')]
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['trace_link']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': [('0', 'N', 'Source')]
          ,'MetaModelElement_T': [('0', 'N', 'Destination')]
          ,'Element': [('0', 'N', 'Source')]
          ,'NamedElement': [('0', 'N', 'Source')]
          ,'Trigger_S': [('0', 'N', 'Source')]
          ,'Action': [('0', 'N', 'Source')]
          ,'PortRef': [('0', 'N', 'Source')]
          ,'PortConnectorRef': [('0', 'N', 'Source')]
          ,'StateMachineElement': [('0', 'N', 'Source')]
          ,'Protocol': [('0', 'N', 'Source')]
          ,'Signal': [('0', 'N', 'Source')]
          ,'Port': [('0', 'N', 'Source')]
          ,'Vertex': [('0', 'N', 'Source')]
          ,'InitialPoint': [('0', 'N', 'Source')]
          ,'EntryPoint': [('0', 'N', 'Source')]
          ,'ExitPoint': [('0', 'N', 'Source')]
          ,'Transition': [('0', 'N', 'Source')]
          ,'StateMachine': [('0', 'N', 'Source')]
          ,'State': [('0', 'N', 'Source')]
          ,'Capsule': [('0', 'N', 'Source')]
          ,'PackageContainer': [('0', 'N', 'Source')]
          ,'Model_S': [('0', 'N', 'Source')]
          ,'Package': [('0', 'N', 'Source')]
          ,'CapsuleRole': [('0', 'N', 'Source')]
          ,'PortConnector': [('0', 'N', 'Source')]
          ,'Thread': [('0', 'N', 'Source')]
          ,'PhysicalThread': [('0', 'N', 'Source')]
          ,'LogicalThread': [('0', 'N', 'Source')]
          ,'PortType': [('0', 'N', 'Source')]
          ,'BASE0': [('0', 'N', 'Source')]
          ,'CONJUGATE1': [('0', 'N', 'Source')]
          ,'SignalType': [('0', 'N', 'Source')]
          ,'OUT1': [('0', 'N', 'Source')]
          ,'IN0': [('0', 'N', 'Source')]
          ,'RoleType': [('0', 'N', 'Source')]
          ,'FIXED0': [('0', 'N', 'Source')]
          ,'OPTIONAL1': [('0', 'N', 'Source')]
          ,'PLUGIN2': [('0', 'N', 'Source')]
          ,'TransitionType': [('0', 'N', 'Source')]
          ,'SIBLING0': [('0', 'N', 'Source')]
          ,'IN1': [('0', 'N', 'Source')]
          ,'OUT2': [('0', 'N', 'Source')]
          ,'Def': [('0', 'N', 'Destination')]
          ,'Expr': [('0', 'N', 'Destination')]
          ,'Pattern': [('0', 'N', 'Destination')]
          ,'Proc': [('0', 'N', 'Destination')]
          ,'ProcDef': [('0', 'N', 'Destination')]
          ,'FuncDef': [('0', 'N', 'Destination')]
          ,'Name': [('0', 'N', 'Destination')]
          ,'PythonRef': [('0', 'N', 'Destination')]
          ,'Module': [('0', 'N', 'Destination')]
          ,'Null': [('0', 'N', 'Destination')]
          ,'Trigger_T': [('0', 'N', 'Destination')]
          ,'Listen': [('0', 'N', 'Destination')]
          ,'ConditionBranch': [('0', 'N', 'Destination')]
          ,'ListenBranch': [('0', 'N', 'Destination')]
          ,'Site': [('0', 'N', 'Destination')]
          ,'Model_T': [('0', 'N', 'Destination')]
          ,'MatchCase': [('0', 'N', 'Destination')]
          ,'Condition': [('0', 'N', 'Destination')]
          ,'New': [('0', 'N', 'Destination')]
          ,'Delay': [('0', 'N', 'Destination')]
          ,'Par': [('0', 'N', 'Destination')]
          ,'ParIndexed': [('0', 'N', 'Destination')]
          ,'Inst': [('0', 'N', 'Destination')]
          ,'LocalDef': [('0', 'N', 'Destination')]
          ,'Seq': [('0', 'N', 'Destination')]
          ,'ConditionSet': [('0', 'N', 'Destination')]
          ,'Match': [('0', 'N', 'Destination')]
          ,'Print': [('0', 'N', 'Destination')]
          ,'Attribute': []
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['hasAttribute_S']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': [('0', 'N', 'Destination')]
          ,'MetaModelElement_T': []
          ,'Element': [('0', 'N', 'Destination')]
          ,'NamedElement': [('0', 'N', 'Destination')]
          ,'Trigger_S': [('0', 'N', 'Destination')]
          ,'Action': [('0', 'N', 'Destination')]
          ,'PortRef': [('0', 'N', 'Destination')]
          ,'PortConnectorRef': [('0', 'N', 'Destination')]
          ,'StateMachineElement': [('0', 'N', 'Destination')]
          ,'Protocol': [('0', 'N', 'Destination')]
          ,'Signal': [('0', 'N', 'Destination')]
          ,'Port': [('0', 'N', 'Destination')]
          ,'Vertex': [('0', 'N', 'Destination')]
          ,'InitialPoint': [('0', 'N', 'Destination')]
          ,'EntryPoint': [('0', 'N', 'Destination')]
          ,'ExitPoint': [('0', 'N', 'Destination')]
          ,'Transition': [('0', 'N', 'Destination')]
          ,'StateMachine': [('0', 'N', 'Destination')]
          ,'State': [('0', 'N', 'Destination')]
          ,'Capsule': [('0', 'N', 'Destination')]
          ,'PackageContainer': [('0', 'N', 'Destination')]
          ,'Model_S': [('0', 'N', 'Destination')]
          ,'Package': [('0', 'N', 'Destination')]
          ,'CapsuleRole': [('0', 'N', 'Destination')]
          ,'PortConnector': [('0', 'N', 'Destination')]
          ,'Thread': [('0', 'N', 'Destination')]
          ,'PhysicalThread': [('0', 'N', 'Destination')]
          ,'LogicalThread': [('0', 'N', 'Destination')]
          ,'PortType': [('0', 'N', 'Destination')]
          ,'BASE0': [('0', 'N', 'Destination')]
          ,'CONJUGATE1': [('0', 'N', 'Destination')]
          ,'SignalType': [('0', 'N', 'Destination')]
          ,'OUT1': [('0', 'N', 'Destination')]
          ,'IN0': [('0', 'N', 'Destination')]
          ,'RoleType': [('0', 'N', 'Destination')]
          ,'FIXED0': [('0', 'N', 'Destination')]
          ,'OPTIONAL1': [('0', 'N', 'Destination')]
          ,'PLUGIN2': [('0', 'N', 'Destination')]
          ,'TransitionType': [('0', 'N', 'Destination')]
          ,'SIBLING0': [('0', 'N', 'Destination')]
          ,'IN1': [('0', 'N', 'Destination')]
          ,'OUT2': [('0', 'N', 'Destination')]
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': [('0', 'N', 'Source')]
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['hasAttribute_T']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': [('0', 'N', 'Destination')]
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': [('0', 'N', 'Destination')]
          ,'Expr': [('0', 'N', 'Destination')]
          ,'Pattern': [('0', 'N', 'Destination')]
          ,'Proc': [('0', 'N', 'Destination')]
          ,'ProcDef': [('0', 'N', 'Destination')]
          ,'FuncDef': [('0', 'N', 'Destination')]
          ,'Name': [('0', 'N', 'Destination')]
          ,'PythonRef': [('0', 'N', 'Destination')]
          ,'Module': [('0', 'N', 'Destination')]
          ,'Null': [('0', 'N', 'Destination')]
          ,'Trigger_T': [('0', 'N', 'Destination')]
          ,'Listen': [('0', 'N', 'Destination')]
          ,'ConditionBranch': [('0', 'N', 'Destination')]
          ,'ListenBranch': [('0', 'N', 'Destination')]
          ,'Site': [('0', 'N', 'Destination')]
          ,'Model_T': [('0', 'N', 'Destination')]
          ,'MatchCase': [('0', 'N', 'Destination')]
          ,'Condition': [('0', 'N', 'Destination')]
          ,'New': [('0', 'N', 'Destination')]
          ,'Delay': [('0', 'N', 'Destination')]
          ,'Par': [('0', 'N', 'Destination')]
          ,'ParIndexed': [('0', 'N', 'Destination')]
          ,'Inst': [('0', 'N', 'Destination')]
          ,'LocalDef': [('0', 'N', 'Destination')]
          ,'Seq': [('0', 'N', 'Destination')]
          ,'ConditionSet': [('0', 'N', 'Destination')]
          ,'Match': [('0', 'N', 'Destination')]
          ,'Print': [('0', 'N', 'Destination')]
          ,'Attribute': [('0', 'N', 'Source')]
          ,'Expression': []
          ,'Equation': []
          ,'Operation': []
          ,'Add': []
          ,'Subtract': []
          ,'Concat': []
          ,'Constant': []
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['leftExpr']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': [('0', 'N', 'Source')]
          ,'Expression': [('0', 'N', 'Source')]
          ,'Equation': [('0', 'N', 'Destination')]
          ,'Operation': [('0', 'N', 'Source')]
          ,'Add': [('0', 'N', 'Source')]
          ,'Subtract': [('0', 'N', 'Source')]
          ,'Concat': [('0', 'N', 'Source')]
          ,'Constant': [('0', 'N', 'Source')]
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['rightExpr']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': [('0', 'N', 'Source')]
          ,'Expression': [('0', 'N', 'Source')]
          ,'Equation': [('0', 'N', 'Destination')]
          ,'Operation': [('0', 'N', 'Source')]
          ,'Add': [('0', 'N', 'Source')]
          ,'Subtract': [('0', 'N', 'Source')]
          ,'Concat': [('0', 'N', 'Source')]
          ,'Constant': [('0', 'N', 'Source')]
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    self.CardinalityTable['hasArgs']={
          'MatchModel': []
          ,'ApplyModel': []
          ,'MetaModelElement_S': []
          ,'MetaModelElement_T': []
          ,'Element': []
          ,'NamedElement': []
          ,'Trigger_S': []
          ,'Action': []
          ,'PortRef': []
          ,'PortConnectorRef': []
          ,'StateMachineElement': []
          ,'Protocol': []
          ,'Signal': []
          ,'Port': []
          ,'Vertex': []
          ,'InitialPoint': []
          ,'EntryPoint': []
          ,'ExitPoint': []
          ,'Transition': []
          ,'StateMachine': []
          ,'State': []
          ,'Capsule': []
          ,'PackageContainer': []
          ,'Model_S': []
          ,'Package': []
          ,'CapsuleRole': []
          ,'PortConnector': []
          ,'Thread': []
          ,'PhysicalThread': []
          ,'LogicalThread': []
          ,'PortType': []
          ,'BASE0': []
          ,'CONJUGATE1': []
          ,'SignalType': []
          ,'OUT1': []
          ,'IN0': []
          ,'RoleType': []
          ,'FIXED0': []
          ,'OPTIONAL1': []
          ,'PLUGIN2': []
          ,'TransitionType': []
          ,'SIBLING0': []
          ,'IN1': []
          ,'OUT2': []
          ,'Def': []
          ,'Expr': []
          ,'Pattern': []
          ,'Proc': []
          ,'ProcDef': []
          ,'FuncDef': []
          ,'Name': []
          ,'PythonRef': []
          ,'Module': []
          ,'Null': []
          ,'Trigger_T': []
          ,'Listen': []
          ,'ConditionBranch': []
          ,'ListenBranch': []
          ,'Site': []
          ,'Model_T': []
          ,'MatchCase': []
          ,'Condition': []
          ,'New': []
          ,'Delay': []
          ,'Par': []
          ,'ParIndexed': []
          ,'Inst': []
          ,'LocalDef': []
          ,'Seq': []
          ,'ConditionSet': []
          ,'Match': []
          ,'Print': []
          ,'Attribute': [('0', 'N', 'Source')]
          ,'Expression': [('0', 'N', 'Source')]
          ,'Equation': []
          ,'Operation': [('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Add': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Subtract': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Concat': [('0', 'N', 'Source'), ('0', 'N', 'Source'), ('0', 'N', 'Destination')]
          ,'Constant': [('0', 'N', 'Source')]
          ,'paired_with': []
          ,'match_contains': []
          ,'apply_contains': []
          ,'directLink_T': []
          ,'directLink_S': []
          ,'indirectLink_S': []
          ,'backward_link': []
          ,'trace_link': []
          ,'hasAttribute_S': []
          ,'hasAttribute_T': []
          ,'leftExpr': []
          ,'rightExpr': []
          ,'hasArgs': [] }
    
    self.entitiesInMetaModel['UMLRT2Kiltera_MM']=["MatchModel", "ApplyModel", "MetaModelElement_S", "MetaModelElement_T", "Element", "NamedElement", "Trigger_S", "Action", "PortRef", "PortConnectorRef", "StateMachineElement", "Protocol", "Signal", "Port", "Vertex", "InitialPoint", "EntryPoint", "ExitPoint", "Transition", "StateMachine", "State", "Capsule", "PackageContainer", "Model_S", "Package", "CapsuleRole", "PortConnector", "Thread", "PhysicalThread", "LogicalThread", "PortType", "BASE0", "CONJUGATE1", "SignalType", "OUT1", "IN0", "RoleType", "FIXED0", "OPTIONAL1", "PLUGIN2", "TransitionType", "SIBLING0", "IN1", "OUT2", "Def", "Expr", "Pattern", "Proc", "ProcDef", "FuncDef", "Name", "PythonRef", "Module", "Null", "Trigger_T", "Listen", "ConditionBranch", "ListenBranch", "Site", "Model_T", "MatchCase", "Condition", "New", "Delay", "Par", "ParIndexed", "Inst", "LocalDef", "Seq", "ConditionSet", "Match", "Print", "Attribute", "Expression", "Equation", "Operation", "Add", "Subtract", "Concat", "Constant", "paired_with", "match_contains", "apply_contains", "directLink_T", "directLink_S", "indirectLink_S", "backward_link", "trace_link", "hasAttribute_S", "hasAttribute_T", "leftExpr", "rightExpr", "hasArgs"]

    
def createNewMatchModel(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = MatchModel(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["MatchModel"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_MatchModel(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_MatchModel(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("MatchModel", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewApplyModel(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = ApplyModel(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["ApplyModel"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ApplyModel(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ApplyModel(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ApplyModel", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewMetaModelElement_S(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = MetaModelElement_S(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["MetaModelElement_S"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_MetaModelElement_S(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_MetaModelElement_S(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("MetaModelElement_S", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewMetaModelElement_T(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = MetaModelElement_T(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["MetaModelElement_T"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_MetaModelElement_T(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_MetaModelElement_T(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("MetaModelElement_T", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewElement(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Element(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Element"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Element(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Element(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Element", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewNamedElement(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = NamedElement(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["NamedElement"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_NamedElement(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_NamedElement(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("NamedElement", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewTrigger_S(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Trigger_S(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Trigger_S"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Trigger_S(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Trigger_S(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Trigger_S", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewAction(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Action(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Action"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Action(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Action(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Action", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPortRef(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PortRef(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PortRef"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PortRef(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PortRef(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PortRef", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPortConnectorRef(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PortConnectorRef(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PortConnectorRef"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PortConnectorRef(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PortConnectorRef(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PortConnectorRef", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewStateMachineElement(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = StateMachineElement(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["StateMachineElement"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_StateMachineElement(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_StateMachineElement(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("StateMachineElement", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewProtocol(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Protocol(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Protocol"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Protocol(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Protocol(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Protocol", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewSignal(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Signal(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Signal"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Signal(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Signal(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Signal", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPort(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Port(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Port"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Port(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Port(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Port", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewVertex(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Vertex(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Vertex"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Vertex(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Vertex(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Vertex", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewInitialPoint(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = InitialPoint(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["InitialPoint"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_InitialPoint(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_InitialPoint(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("InitialPoint", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewEntryPoint(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = EntryPoint(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["EntryPoint"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_EntryPoint(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_EntryPoint(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("EntryPoint", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewExitPoint(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = ExitPoint(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["ExitPoint"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ExitPoint(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ExitPoint(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ExitPoint", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewTransition(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Transition(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Transition"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Transition(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Transition(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Transition", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewStateMachine(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = StateMachine(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["StateMachine"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_StateMachine(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_StateMachine(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("StateMachine", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewState(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = State(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["State"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_State(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_State(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("State", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewCapsule(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Capsule(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Capsule"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Capsule(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Capsule(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Capsule", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPackageContainer(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PackageContainer(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PackageContainer"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PackageContainer(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PackageContainer(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PackageContainer", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewModel_S(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Model_S(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Model_S"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Model_S(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Model_S(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Model_S", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPackage(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Package(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Package"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Package(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Package(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Package", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewCapsuleRole(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = CapsuleRole(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["CapsuleRole"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_CapsuleRole(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_CapsuleRole(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("CapsuleRole", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPortConnector(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PortConnector(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PortConnector"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PortConnector(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PortConnector(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PortConnector", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewThread(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Thread(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Thread"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Thread(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Thread(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Thread", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPhysicalThread(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PhysicalThread(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PhysicalThread"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PhysicalThread(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PhysicalThread(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PhysicalThread", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewLogicalThread(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = LogicalThread(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["LogicalThread"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_LogicalThread(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_LogicalThread(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("LogicalThread", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPortType(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PortType(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PortType"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PortType(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PortType(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PortType", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewBASE0(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = BASE0(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["BASE0"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_BASE0(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_BASE0(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("BASE0", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewCONJUGATE1(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = CONJUGATE1(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["CONJUGATE1"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_CONJUGATE1(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_CONJUGATE1(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("CONJUGATE1", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewSignalType(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = SignalType(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["SignalType"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_SignalType(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_SignalType(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("SignalType", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewOUT1(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = OUT1(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["OUT1"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_OUT1(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_OUT1(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("OUT1", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewIN0(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = IN0(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["IN0"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_IN0(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_IN0(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("IN0", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewRoleType(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = RoleType(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["RoleType"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_RoleType(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_RoleType(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("RoleType", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewFIXED0(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = FIXED0(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["FIXED0"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_FIXED0(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_FIXED0(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("FIXED0", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewOPTIONAL1(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = OPTIONAL1(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["OPTIONAL1"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_OPTIONAL1(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_OPTIONAL1(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("OPTIONAL1", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPLUGIN2(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PLUGIN2(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PLUGIN2"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PLUGIN2(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PLUGIN2(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PLUGIN2", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewTransitionType(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = TransitionType(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["TransitionType"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_TransitionType(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_TransitionType(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("TransitionType", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewSIBLING0(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = SIBLING0(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["SIBLING0"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_SIBLING0(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_SIBLING0(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("SIBLING0", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewIN1(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = IN1(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["IN1"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_IN1(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_IN1(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("IN1", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewOUT2(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = OUT2(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["OUT2"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_OUT2(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_OUT2(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("OUT2", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewDef(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Def(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Def"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Def(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Def(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Def", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewExpr(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Expr(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Expr"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Expr(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Expr(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Expr", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPattern(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Pattern(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Pattern"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Pattern(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Pattern(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Pattern", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewProc(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Proc(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Proc"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Proc(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Proc(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Proc", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewProcDef(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = ProcDef(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["ProcDef"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ProcDef(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ProcDef(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ProcDef", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewFuncDef(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = FuncDef(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["FuncDef"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_FuncDef(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_FuncDef(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("FuncDef", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewName(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Name(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Name"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Name(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Name(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Name", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPythonRef(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = PythonRef(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["PythonRef"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_PythonRef(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_PythonRef(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("PythonRef", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewModule(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Module(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Module"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Module(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Module(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Module", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewNull(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Null(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Null"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Null(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Null(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Null", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewTrigger_T(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Trigger_T(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Trigger_T"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Trigger_T(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Trigger_T(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Trigger_T", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewListen(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Listen(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Listen"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Listen(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Listen(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Listen", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewConditionBranch(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = ConditionBranch(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["ConditionBranch"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ConditionBranch(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ConditionBranch(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ConditionBranch", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewListenBranch(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = ListenBranch(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["ListenBranch"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ListenBranch(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ListenBranch(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ListenBranch", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewSite(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Site(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Site"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Site(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Site(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Site", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewModel_T(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Model_T(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Model_T"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Model_T(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Model_T(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Model_T", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewMatchCase(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = MatchCase(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["MatchCase"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_MatchCase(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_MatchCase(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("MatchCase", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewCondition(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Condition(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Condition"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Condition(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Condition(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Condition", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewNew(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = New(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["New"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_New(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_New(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("New", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewDelay(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Delay(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Delay"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Delay(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Delay(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Delay", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPar(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Par(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Par"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Par(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Par(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Par", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewParIndexed(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = ParIndexed(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["ParIndexed"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ParIndexed(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ParIndexed(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ParIndexed", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewInst(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Inst(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Inst"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Inst(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Inst(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Inst", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewLocalDef(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = LocalDef(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["LocalDef"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_LocalDef(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_LocalDef(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("LocalDef", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewSeq(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Seq(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Seq"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Seq(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Seq(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Seq", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewConditionSet(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = ConditionSet(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["ConditionSet"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ConditionSet(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ConditionSet(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ConditionSet", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewMatch(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Match(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Match"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Match(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Match(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Match", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewPrint(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Print(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Print"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Print(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Print(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Print", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewAttribute(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Attribute(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Attribute"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Attribute(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Attribute(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewExpression(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Expression(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Expression"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Expression(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Expression(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Expression", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewEquation(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Equation(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Equation"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Equation(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Equation(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewOperation(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Operation(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Operation"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Operation(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Operation(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Operation", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewAdd(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Add(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Add"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Add(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Add(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Add", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewSubtract(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Subtract(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Subtract"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Subtract(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Subtract(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Subtract", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewConcat(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Concat(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Concat"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Concat(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Concat(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Concat", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewConstant(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = Constant(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["Constant"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_Constant(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_Constant(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewpaired_with(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = paired_with(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["paired_with"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_paired_with(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_paired_with(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("paired_with", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewmatch_contains(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = match_contains(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["match_contains"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_match_contains(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_match_contains(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("match_contains", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewapply_contains(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = apply_contains(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["apply_contains"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_apply_contains(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_apply_contains(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewdirectLink_T(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = directLink_T(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["directLink_T"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_directLink_T(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_directLink_T(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("directLink_T", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewdirectLink_S(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = directLink_S(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["directLink_S"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_directLink_S(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_directLink_S(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("directLink_S", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewindirectLink_S(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = indirectLink_S(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["indirectLink_S"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_indirectLink_S(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_indirectLink_S(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("indirectLink_S", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewbackward_link(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = backward_link(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["backward_link"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_backward_link(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_backward_link(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("backward_link", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewtrace_link(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = trace_link(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["trace_link"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_trace_link(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_trace_link(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("trace_link", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewhasAttribute_S(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = hasAttribute_S(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["hasAttribute_S"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_hasAttribute_S(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_hasAttribute_S(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("hasAttribute_S", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewhasAttribute_T(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = hasAttribute_T(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["hasAttribute_T"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_hasAttribute_T(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_hasAttribute_T(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewleftExpr(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = leftExpr(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["leftExpr"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_leftExpr(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_leftExpr(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewrightExpr(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = rightExpr(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["rightExpr"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_rightExpr(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_rightExpr(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNewhasArgs(self, wherex, wherey, screenCoordinates = 1):
   self.fromClass = None
   self.toClass = None
   # try the global constraints...
   res = self.ASGroot.preCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   new_semantic_obj = hasArgs(self)
   res = new_semantic_obj.preCondition ( ASGNode.CREATE )
   if res: return self.constraintViolation(res)
   new_semantic_obj.preAction ( ASGNode.CREATE ) 

   ne = len(self.ASGroot.listNodes["hasArgs"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_hasArgs(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_hasArgs(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("hasArgs", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   res = self.ASGroot.postCondition(ASG.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return

   res = new_semantic_obj.postCondition(ASGNode.CREATE)
   if res:
      self.constraintViolation(res)
      self.mode=self.IDLEMODE
      return
   new_semantic_obj.postAction(ASGNode.CREATE)

   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def createNew_Model(self, wherex, wherey, screenCoordinates = 1):
   self.toClass = None
   self.fromClass = None
   new_semantic_obj = ASG_UMLRT2Kiltera_MM(self)
   ne = len(self.ASGroot.listNodes["ASG_UMLRT2Kiltera_MM"])
   if new_semantic_obj.keyword_:
      new_semantic_obj.keyword_.setValue(new_semantic_obj.keyword_.toString()+str(ne))
   if screenCoordinates:
      new_obj = graph_ASG_ERmetaMetaModel(self.UMLmodel.canvasx(wherex), self.UMLmodel.canvasy(wherey), new_semantic_obj)
   else: # already in canvas coordinates
      new_obj = graph_ASG_ERmetaMetaModel(wherex, wherey, new_semantic_obj)
   new_obj.DrawObject(self.UMLmodel, self.editGGLabel)
   self.UMLmodel.addtag_withtag("ASG_UMLRT2Kiltera_MM", new_obj.tag)
   new_semantic_obj.graphObject_ = new_obj
   self.ASGroot.addNode(new_semantic_obj)
   self.mode=self.IDLEMODE
   if self.editGGLabel :
      self.statusbar.event(StatusBar.TRANSFORMATION, StatusBar.CREATE)
   else:
      self.statusbar.event(StatusBar.MODEL, StatusBar.CREATE)
   return new_semantic_obj
def fillTypesInformation(self):
    objs = []
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("String", "ATOM3String", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    param = ATOM3String("None")
    params.append(param)
    param = ATOM3String("None")
    params.append(param)
    param = ATOM3String("1")
    params.append(param)
    obj.setValue(("Boolean", "ATOM3Boolean", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Integer", "ATOM3Integer", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Float", "ATOM3Float", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    param = ATOM3String("self.types")
    params.append(param)
    obj.setValue(("Attribute", "ATOM3Attribute", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    param = ATOM3String("[1,1,1,self.types]")
    params.append(param)
    param = ATOM3String("ATOM3Attribute")
    params.append(param)
    param = ATOM3String("self.types")
    params.append(param)
    obj.setValue(("List", "ATOM3List", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    param = ATOM3String("[]")
    params.append(param)
    param = ATOM3String("1")
    params.append(param)
    param = ATOM3String("1")
    params.append(param)
    obj.setValue(("Enum", "ATOM3Enum", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Constraint", "ATOM3Constraint", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Action", "ATOM3Action", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    param = ATOM3String("'class0'")
    params.append(param)
    param = ATOM3String("None")
    params.append(param)
    obj.setValue(("Appearance", "ATOM3Appearance", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("BottomType", "ATOM3BottomType", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Link", "ATOM3Link", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Port", "ATOM3Port", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Connection", "ATOM3Connection", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    param = ATOM3String("None")
    params.append(param)
    param = ATOM3String("None")
    params.append(param)
    param = ATOM3String("1")
    params.append(param)
    obj.setValue(("MSEnum", "ATOM3MSEnum", params, (None, 0) ))
    objs.append(obj)
    obj = ATOM3TypeInfo(self)
    params  = []
    obj.setValue(("Text", "ATOM3Text", params, (None, 0) ))
    objs.append(obj)
    self.typeList.setValue(objs)

