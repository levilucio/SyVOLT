"""
__State2ProcDef_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: gehan
Modified: Wed Feb 11 15:06:10 2015
___________________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from MatchModel import *
from ApplyModel import *
from State import *
from ProcDef import *
from Name import *
from Attribute import *
from Equation import *
from Concat import *
from Constant import *
from paired_with import *
from match_contains import *
from apply_contains import *
from directLink_T import *
from hasAttribute_S import *
from hasAttribute_T import *
from leftExpr import *
from rightExpr import *
from hasArgs import *
from graph_directLink_T import *
from graph_Name import *
from graph_hasAttribute_T import *
from graph_Attribute import *
from graph_hasAttribute_S import *
from graph_hasArgs import *
from graph_MatchModel import *
from graph_apply_contains import *
from graph_rightExpr import *
from graph_paired_with import *
from graph_Equation import *
from graph_match_contains import *
from graph_Concat import *
from graph_leftExpr import *
from graph_ProcDef import *
from graph_Constant import *
from graph_ApplyModel import *
from graph_State import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def State2ProcDef_MDL(self, rootNode, UMLRT2Kiltera_MMRootNode=None):

    # --- Generating attributes code for ASG UMLRT2Kiltera_MM ---
    if( UMLRT2Kiltera_MMRootNode ): 
        # author
        UMLRT2Kiltera_MMRootNode.author.setValue('Annonymous')

        # description
        UMLRT2Kiltera_MMRootNode.description.setValue('\n')
        UMLRT2Kiltera_MMRootNode.description.setHeight(15)

        # name
        UMLRT2Kiltera_MMRootNode.name.setValue('State2ProcDef')
    # --- ASG attributes over ---


    self.obj779=MatchModel(self)
    self.obj779.isGraphObjectVisual = True

    if(hasattr(self.obj779, '_setHierarchicalLink')):
      self.obj779._setHierarchicalLink(False)

    self.obj779.graphClass_= graph_MatchModel
    if self.genGraphics:
       new_obj = graph_MatchModel(120.0,40.0,self.obj779)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MatchModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj779.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj779)
    self.globalAndLocalPostcondition(self.obj779, rootNode)
    self.obj779.postAction( rootNode.CREATE )

    self.obj780=ApplyModel(self)
    self.obj780.isGraphObjectVisual = True

    if(hasattr(self.obj780, '_setHierarchicalLink')):
      self.obj780._setHierarchicalLink(False)

    self.obj780.graphClass_= graph_ApplyModel
    if self.genGraphics:
       new_obj = graph_ApplyModel(120.0,260.0,self.obj780)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("ApplyModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj780.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj780)
    self.globalAndLocalPostcondition(self.obj780, rootNode)
    self.obj780.postAction( rootNode.CREATE )

    self.obj781=State(self)
    self.obj781.isGraphObjectVisual = True

    if(hasattr(self.obj781, '_setHierarchicalLink')):
      self.obj781._setHierarchicalLink(False)

    # name
    self.obj781.name.setValue('state1')

    # classtype
    self.obj781.classtype.setValue('State')

    # cardinality
    self.obj781.cardinality.setValue('+')

    self.obj781.graphClass_= graph_State
    if self.genGraphics:
       new_obj = graph_State(400.0,80.0,self.obj781)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("State", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj781.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj781)
    self.globalAndLocalPostcondition(self.obj781, rootNode)
    self.obj781.postAction( rootNode.CREATE )

    self.obj782=ProcDef(self)
    self.obj782.isGraphObjectVisual = True

    if(hasattr(self.obj782, '_setHierarchicalLink')):
      self.obj782._setHierarchicalLink(False)

    # classtype
    self.obj782.classtype.setValue('ProcDef')

    # cardinality
    self.obj782.cardinality.setValue('1')

    # name
    self.obj782.name.setValue('procdef1')

    self.obj782.graphClass_= graph_ProcDef
    if self.genGraphics:
       new_obj = graph_ProcDef(400.0,260.0,self.obj782)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("ProcDef", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj782.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj782)
    self.globalAndLocalPostcondition(self.obj782, rootNode)
    self.obj782.postAction( rootNode.CREATE )

    self.obj783=Name(self)
    self.obj783.isGraphObjectVisual = True

    if(hasattr(self.obj783, '_setHierarchicalLink')):
      self.obj783._setHierarchicalLink(False)

    # classtype
    self.obj783.classtype.setValue('Name')

    # cardinality
    self.obj783.cardinality.setValue('1')

    # name
    self.obj783.name.setValue('name1')

    self.obj783.graphClass_= graph_Name
    if self.genGraphics:
       new_obj = graph_Name(260.0,460.0,self.obj783)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Name", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj783.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj783)
    self.globalAndLocalPostcondition(self.obj783, rootNode)
    self.obj783.postAction( rootNode.CREATE )

    self.obj784=Name(self)
    self.obj784.isGraphObjectVisual = True

    if(hasattr(self.obj784, '_setHierarchicalLink')):
      self.obj784._setHierarchicalLink(False)

    # classtype
    self.obj784.classtype.setValue('Name')

    # cardinality
    self.obj784.cardinality.setValue('1')

    # name
    self.obj784.name.setValue('name2')

    self.obj784.graphClass_= graph_Name
    if self.genGraphics:
       new_obj = graph_Name(460.0,460.0,self.obj784)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Name", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj784.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj784)
    self.globalAndLocalPostcondition(self.obj784, rootNode)
    self.obj784.postAction( rootNode.CREATE )

    self.obj785=Name(self)
    self.obj785.isGraphObjectVisual = True

    if(hasattr(self.obj785, '_setHierarchicalLink')):
      self.obj785._setHierarchicalLink(False)

    # classtype
    self.obj785.classtype.setValue('Name')

    # cardinality
    self.obj785.cardinality.setValue('1')

    # name
    self.obj785.name.setValue('name3')

    self.obj785.graphClass_= graph_Name
    if self.genGraphics:
       new_obj = graph_Name(660.0,460.0,self.obj785)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Name", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj785.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj785)
    self.globalAndLocalPostcondition(self.obj785, rootNode)
    self.obj785.postAction( rootNode.CREATE )

    self.obj786=Attribute(self)
    self.obj786.isGraphObjectVisual = True

    if(hasattr(self.obj786, '_setHierarchicalLink')):
      self.obj786._setHierarchicalLink(False)

    # Type
    self.obj786.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj786.Type.config = 0

    # name
    self.obj786.name.setValue('name')

    self.obj786.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(680.0,40.0,self.obj786)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj786.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj786)
    self.globalAndLocalPostcondition(self.obj786, rootNode)
    self.obj786.postAction( rootNode.CREATE )

    self.obj787=Attribute(self)
    self.obj787.isGraphObjectVisual = True

    if(hasattr(self.obj787, '_setHierarchicalLink')):
      self.obj787._setHierarchicalLink(False)

    # Type
    self.obj787.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj787.Type.config = 0

    # name
    self.obj787.name.setValue('name')

    self.obj787.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(680.0,280.0,self.obj787)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj787.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj787)
    self.globalAndLocalPostcondition(self.obj787, rootNode)
    self.obj787.postAction( rootNode.CREATE )

    self.obj788=Attribute(self)
    self.obj788.isGraphObjectVisual = True

    if(hasattr(self.obj788, '_setHierarchicalLink')):
      self.obj788._setHierarchicalLink(False)

    # Type
    self.obj788.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj788.Type.config = 0

    # name
    self.obj788.name.setValue('literal')

    self.obj788.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(180.0,560.0,self.obj788)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj788.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj788)
    self.globalAndLocalPostcondition(self.obj788, rootNode)
    self.obj788.postAction( rootNode.CREATE )

    self.obj789=Attribute(self)
    self.obj789.isGraphObjectVisual = True

    if(hasattr(self.obj789, '_setHierarchicalLink')):
      self.obj789._setHierarchicalLink(False)

    # Type
    self.obj789.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj789.Type.config = 0

    # name
    self.obj789.name.setValue('literal')

    self.obj789.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(500.0,560.0,self.obj789)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj789.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj789)
    self.globalAndLocalPostcondition(self.obj789, rootNode)
    self.obj789.postAction( rootNode.CREATE )

    self.obj790=Attribute(self)
    self.obj790.isGraphObjectVisual = True

    if(hasattr(self.obj790, '_setHierarchicalLink')):
      self.obj790._setHierarchicalLink(False)

    # Type
    self.obj790.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj790.Type.config = 0

    # name
    self.obj790.name.setValue('literal')

    self.obj790.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(680.0,560.0,self.obj790)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj790.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj790)
    self.globalAndLocalPostcondition(self.obj790, rootNode)
    self.obj790.postAction( rootNode.CREATE )

    self.obj791=Attribute(self)
    self.obj791.isGraphObjectVisual = True

    if(hasattr(self.obj791, '_setHierarchicalLink')):
      self.obj791._setHierarchicalLink(False)

    # Type
    self.obj791.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj791.Type.config = 0

    # name
    self.obj791.name.setValue('pivot')

    self.obj791.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(740.0,360.0,self.obj791)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj791.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj791)
    self.globalAndLocalPostcondition(self.obj791, rootNode)
    self.obj791.postAction( rootNode.CREATE )

    self.obj792=Equation(self)
    self.obj792.isGraphObjectVisual = True

    if(hasattr(self.obj792, '_setHierarchicalLink')):
      self.obj792._setHierarchicalLink(False)

    # name
    self.obj792.name.setValue('eq1')

    self.obj792.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(880.0,240.0,self.obj792)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj792.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj792)
    self.globalAndLocalPostcondition(self.obj792, rootNode)
    self.obj792.postAction( rootNode.CREATE )

    self.obj793=Equation(self)
    self.obj793.isGraphObjectVisual = True

    if(hasattr(self.obj793, '_setHierarchicalLink')):
      self.obj793._setHierarchicalLink(False)

    # name
    self.obj793.name.setValue('eq2')

    self.obj793.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(20.0,640.0,self.obj793)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj793.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj793)
    self.globalAndLocalPostcondition(self.obj793, rootNode)
    self.obj793.postAction( rootNode.CREATE )

    self.obj794=Equation(self)
    self.obj794.isGraphObjectVisual = True

    if(hasattr(self.obj794, '_setHierarchicalLink')):
      self.obj794._setHierarchicalLink(False)

    # name
    self.obj794.name.setValue('eq3')

    self.obj794.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(340.0,600.0,self.obj794)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj794.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj794)
    self.globalAndLocalPostcondition(self.obj794, rootNode)
    self.obj794.postAction( rootNode.CREATE )

    self.obj795=Equation(self)
    self.obj795.isGraphObjectVisual = True

    if(hasattr(self.obj795, '_setHierarchicalLink')):
      self.obj795._setHierarchicalLink(False)

    # name
    self.obj795.name.setValue('eq4')

    self.obj795.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(860.0,600.0,self.obj795)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj795.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj795)
    self.globalAndLocalPostcondition(self.obj795, rootNode)
    self.obj795.postAction( rootNode.CREATE )

    self.obj796=Equation(self)
    self.obj796.isGraphObjectVisual = True

    if(hasattr(self.obj796, '_setHierarchicalLink')):
      self.obj796._setHierarchicalLink(False)

    # name
    self.obj796.name.setValue('eq5')

    self.obj796.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(900.0,360.0,self.obj796)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj796.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj796)
    self.globalAndLocalPostcondition(self.obj796, rootNode)
    self.obj796.postAction( rootNode.CREATE )

    self.obj797=Concat(self)
    self.obj797.isGraphObjectVisual = True

    if(hasattr(self.obj797, '_setHierarchicalLink')):
      self.obj797._setHierarchicalLink(False)

    # Type
    self.obj797.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj797.Type.config = 0

    # name
    self.obj797.name.setValue('concat1')

    self.obj797.graphClass_= graph_Concat
    if self.genGraphics:
       new_obj = graph_Concat(680.0,140.0,self.obj797)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Concat", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj797.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj797)
    self.globalAndLocalPostcondition(self.obj797, rootNode)
    self.obj797.postAction( rootNode.CREATE )

    self.obj798=Constant(self)
    self.obj798.isGraphObjectVisual = True

    if(hasattr(self.obj798, '_setHierarchicalLink')):
      self.obj798._setHierarchicalLink(False)

    # Type
    self.obj798.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj798.Type.config = 0

    # name
    self.obj798.name.setValue('S')

    self.obj798.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(860.0,40.0,self.obj798)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj798.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj798)
    self.globalAndLocalPostcondition(self.obj798, rootNode)
    self.obj798.postAction( rootNode.CREATE )

    self.obj799=Constant(self)
    self.obj799.isGraphObjectVisual = True

    if(hasattr(self.obj799, '_setHierarchicalLink')):
      self.obj799._setHierarchicalLink(False)

    # Type
    self.obj799.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj799.Type.config = 0

    # name
    self.obj799.name.setValue('enp')

    self.obj799.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(180.0,640.0,self.obj799)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj799.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj799)
    self.globalAndLocalPostcondition(self.obj799, rootNode)
    self.obj799.postAction( rootNode.CREATE )

    self.obj800=Constant(self)
    self.obj800.isGraphObjectVisual = True

    if(hasattr(self.obj800, '_setHierarchicalLink')):
      self.obj800._setHierarchicalLink(False)

    # Type
    self.obj800.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj800.Type.config = 0

    # name
    self.obj800.name.setValue('exit')

    self.obj800.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(500.0,640.0,self.obj800)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj800.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj800)
    self.globalAndLocalPostcondition(self.obj800, rootNode)
    self.obj800.postAction( rootNode.CREATE )

    self.obj801=Constant(self)
    self.obj801.isGraphObjectVisual = True

    if(hasattr(self.obj801, '_setHierarchicalLink')):
      self.obj801._setHierarchicalLink(False)

    # Type
    self.obj801.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj801.Type.config = 0

    # name
    self.obj801.name.setValue('exack')

    self.obj801.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(680.0,640.0,self.obj801)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj801.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj801)
    self.globalAndLocalPostcondition(self.obj801, rootNode)
    self.obj801.postAction( rootNode.CREATE )

    self.obj802=Constant(self)
    self.obj802.isGraphObjectVisual = True

    if(hasattr(self.obj802, '_setHierarchicalLink')):
      self.obj802._setHierarchicalLink(False)

    # Type
    self.obj802.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj802.Type.config = 0

    # name
    self.obj802.name.setValue('procdef')

    self.obj802.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(900.0,460.0,self.obj802)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj802.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj802)
    self.globalAndLocalPostcondition(self.obj802, rootNode)
    self.obj802.postAction( rootNode.CREATE )

    self.obj803=paired_with(self)
    self.obj803.isGraphObjectVisual = True

    if(hasattr(self.obj803, '_setHierarchicalLink')):
      self.obj803._setHierarchicalLink(False)

    self.obj803.graphClass_= graph_paired_with
    if self.genGraphics:
       new_obj = graph_paired_with(240.5,182.0,self.obj803)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("paired_with", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj803.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj803)
    self.globalAndLocalPostcondition(self.obj803, rootNode)
    self.obj803.postAction( rootNode.CREATE )

    self.obj804=match_contains(self)
    self.obj804.isGraphObjectVisual = True

    if(hasattr(self.obj804, '_setHierarchicalLink')):
      self.obj804._setHierarchicalLink(False)

    self.obj804.graphClass_= graph_match_contains
    if self.genGraphics:
       new_obj = graph_match_contains(404.0,97.0,self.obj804)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("match_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj804.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj804)
    self.globalAndLocalPostcondition(self.obj804, rootNode)
    self.obj804.postAction( rootNode.CREATE )

    self.obj805=apply_contains(self)
    self.obj805.isGraphObjectVisual = True

    if(hasattr(self.obj805, '_setHierarchicalLink')):
      self.obj805._setHierarchicalLink(False)

    self.obj805.graphClass_= graph_apply_contains
    if self.genGraphics:
       new_obj = graph_apply_contains(407.5,302.0,self.obj805)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj805.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj805)
    self.globalAndLocalPostcondition(self.obj805, rootNode)
    self.obj805.postAction( rootNode.CREATE )

    self.obj806=apply_contains(self)
    self.obj806.isGraphObjectVisual = True

    if(hasattr(self.obj806, '_setHierarchicalLink')):
      self.obj806._setHierarchicalLink(False)

    self.obj806.graphClass_= graph_apply_contains
    if self.genGraphics:
       new_obj = graph_apply_contains(330.5,393.0,self.obj806)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj806.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj806)
    self.globalAndLocalPostcondition(self.obj806, rootNode)
    self.obj806.postAction( rootNode.CREATE )

    self.obj807=apply_contains(self)
    self.obj807.isGraphObjectVisual = True

    if(hasattr(self.obj807, '_setHierarchicalLink')):
      self.obj807._setHierarchicalLink(False)

    self.obj807.graphClass_= graph_apply_contains
    if self.genGraphics:
       new_obj = graph_apply_contains(423.5,402.0,self.obj807)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj807.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj807)
    self.globalAndLocalPostcondition(self.obj807, rootNode)
    self.obj807.postAction( rootNode.CREATE )

    self.obj808=apply_contains(self)
    self.obj808.isGraphObjectVisual = True

    if(hasattr(self.obj808, '_setHierarchicalLink')):
      self.obj808._setHierarchicalLink(False)

    self.obj808.graphClass_= graph_apply_contains
    if self.genGraphics:
       new_obj = graph_apply_contains(532.5,400.0,self.obj808)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj808.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj808)
    self.globalAndLocalPostcondition(self.obj808, rootNode)
    self.obj808.postAction( rootNode.CREATE )

    self.obj809=directLink_T(self)
    self.obj809.isGraphObjectVisual = True

    if(hasattr(self.obj809, '_setHierarchicalLink')):
      self.obj809._setHierarchicalLink(False)

    # associationType
    self.obj809.associationType.setValue('channelNames')

    self.obj809.graphClass_= graph_directLink_T
    if self.genGraphics:
       new_obj = graph_directLink_T(502.0,391.0,self.obj809)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("directLink_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj809.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj809)
    self.globalAndLocalPostcondition(self.obj809, rootNode)
    self.obj809.postAction( rootNode.CREATE )

    self.obj810=directLink_T(self)
    self.obj810.isGraphObjectVisual = True

    if(hasattr(self.obj810, '_setHierarchicalLink')):
      self.obj810._setHierarchicalLink(False)

    # associationType
    self.obj810.associationType.setValue('channelNames')

    self.obj810.graphClass_= graph_directLink_T
    if self.genGraphics:
       new_obj = graph_directLink_T(602.0,391.0,self.obj810)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("directLink_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj810.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj810)
    self.globalAndLocalPostcondition(self.obj810, rootNode)
    self.obj810.postAction( rootNode.CREATE )

    self.obj811=directLink_T(self)
    self.obj811.isGraphObjectVisual = True

    if(hasattr(self.obj811, '_setHierarchicalLink')):
      self.obj811._setHierarchicalLink(False)

    # associationType
    self.obj811.associationType.setValue('channelNames')

    self.obj811.graphClass_= graph_directLink_T
    if self.genGraphics:
       new_obj = graph_directLink_T(687.0,398.0,self.obj811)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("directLink_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj811.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj811)
    self.globalAndLocalPostcondition(self.obj811, rootNode)
    self.obj811.postAction( rootNode.CREATE )

    self.obj812=hasAttribute_S(self)
    self.obj812.isGraphObjectVisual = True

    if(hasattr(self.obj812, '_setHierarchicalLink')):
      self.obj812._setHierarchicalLink(False)

    self.obj812.graphClass_= graph_hasAttribute_S
    if self.genGraphics:
       new_obj = graph_hasAttribute_S(662.0,100.5,self.obj812)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_S", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj812.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj812)
    self.globalAndLocalPostcondition(self.obj812, rootNode)
    self.obj812.postAction( rootNode.CREATE )

    self.obj813=hasAttribute_T(self)
    self.obj813.isGraphObjectVisual = True

    if(hasattr(self.obj813, '_setHierarchicalLink')):
      self.obj813._setHierarchicalLink(False)

    self.obj813.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(693.0,312.5,self.obj813)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj813.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj813)
    self.globalAndLocalPostcondition(self.obj813, rootNode)
    self.obj813.postAction( rootNode.CREATE )

    self.obj814=hasAttribute_T(self)
    self.obj814.isGraphObjectVisual = True

    if(hasattr(self.obj814, '_setHierarchicalLink')):
      self.obj814._setHierarchicalLink(False)

    self.obj814.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(365.0,535.5,self.obj814)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj814.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj814)
    self.globalAndLocalPostcondition(self.obj814, rootNode)
    self.obj814.postAction( rootNode.CREATE )

    self.obj815=hasAttribute_T(self)
    self.obj815.isGraphObjectVisual = True

    if(hasattr(self.obj815, '_setHierarchicalLink')):
      self.obj815._setHierarchicalLink(False)

    self.obj815.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(639.0,530.5,self.obj815)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj815.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj815)
    self.globalAndLocalPostcondition(self.obj815, rootNode)
    self.obj815.postAction( rootNode.CREATE )

    self.obj816=hasAttribute_T(self)
    self.obj816.isGraphObjectVisual = True

    if(hasattr(self.obj816, '_setHierarchicalLink')):
      self.obj816._setHierarchicalLink(False)

    self.obj816.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(823.0,532.5,self.obj816)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj816.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj816)
    self.globalAndLocalPostcondition(self.obj816, rootNode)
    self.obj816.postAction( rootNode.CREATE )

    self.obj817=hasAttribute_T(self)
    self.obj817.isGraphObjectVisual = True

    if(hasattr(self.obj817, '_setHierarchicalLink')):
      self.obj817._setHierarchicalLink(False)

    self.obj817.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(722.0,381.5,self.obj817)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj817.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj817)
    self.globalAndLocalPostcondition(self.obj817, rootNode)
    self.obj817.postAction( rootNode.CREATE )

    self.obj818=leftExpr(self)
    self.obj818.isGraphObjectVisual = True

    if(hasattr(self.obj818, '_setHierarchicalLink')):
      self.obj818._setHierarchicalLink(False)

    self.obj818.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(916.0,296.5,self.obj818)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj818.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj818)
    self.globalAndLocalPostcondition(self.obj818, rootNode)
    self.obj818.postAction( rootNode.CREATE )

    self.obj819=leftExpr(self)
    self.obj819.isGraphObjectVisual = True

    if(hasattr(self.obj819, '_setHierarchicalLink')):
      self.obj819._setHierarchicalLink(False)

    self.obj819.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(246.0,636.5,self.obj819)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj819.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj819)
    self.globalAndLocalPostcondition(self.obj819, rootNode)
    self.obj819.postAction( rootNode.CREATE )

    self.obj820=leftExpr(self)
    self.obj820.isGraphObjectVisual = True

    if(hasattr(self.obj820, '_setHierarchicalLink')):
      self.obj820._setHierarchicalLink(False)

    self.obj820.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(556.0,616.5,self.obj820)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj820.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj820)
    self.globalAndLocalPostcondition(self.obj820, rootNode)
    self.obj820.postAction( rootNode.CREATE )

    self.obj821=leftExpr(self)
    self.obj821.isGraphObjectVisual = True

    if(hasattr(self.obj821, '_setHierarchicalLink')):
      self.obj821._setHierarchicalLink(False)

    self.obj821.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(906.0,616.5,self.obj821)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj821.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj821)
    self.globalAndLocalPostcondition(self.obj821, rootNode)
    self.obj821.postAction( rootNode.CREATE )

    self.obj822=leftExpr(self)
    self.obj822.isGraphObjectVisual = True

    if(hasattr(self.obj822, '_setHierarchicalLink')):
      self.obj822._setHierarchicalLink(False)

    self.obj822.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(956.0,396.5,self.obj822)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj822.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj822)
    self.globalAndLocalPostcondition(self.obj822, rootNode)
    self.obj822.postAction( rootNode.CREATE )

    self.obj823=rightExpr(self)
    self.obj823.isGraphObjectVisual = True

    if(hasattr(self.obj823, '_setHierarchicalLink')):
      self.obj823._setHierarchicalLink(False)

    self.obj823.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(916.0,226.5,self.obj823)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj823.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj823)
    self.globalAndLocalPostcondition(self.obj823, rootNode)
    self.obj823.postAction( rootNode.CREATE )

    self.obj824=rightExpr(self)
    self.obj824.isGraphObjectVisual = True

    if(hasattr(self.obj824, '_setHierarchicalLink')):
      self.obj824._setHierarchicalLink(False)

    self.obj824.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(282.0,676.5,self.obj824)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj824.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj824)
    self.globalAndLocalPostcondition(self.obj824, rootNode)
    self.obj824.postAction( rootNode.CREATE )

    self.obj825=rightExpr(self)
    self.obj825.isGraphObjectVisual = True

    if(hasattr(self.obj825, '_setHierarchicalLink')):
      self.obj825._setHierarchicalLink(False)

    self.obj825.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(556.0,656.5,self.obj825)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj825.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj825)
    self.globalAndLocalPostcondition(self.obj825, rootNode)
    self.obj825.postAction( rootNode.CREATE )

    self.obj826=rightExpr(self)
    self.obj826.isGraphObjectVisual = True

    if(hasattr(self.obj826, '_setHierarchicalLink')):
      self.obj826._setHierarchicalLink(False)

    self.obj826.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(906.0,656.5,self.obj826)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj826.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj826)
    self.globalAndLocalPostcondition(self.obj826, rootNode)
    self.obj826.postAction( rootNode.CREATE )

    self.obj827=rightExpr(self)
    self.obj827.isGraphObjectVisual = True

    if(hasattr(self.obj827, '_setHierarchicalLink')):
      self.obj827._setHierarchicalLink(False)

    self.obj827.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(1036.0,446.5,self.obj827)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj827.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj827)
    self.globalAndLocalPostcondition(self.obj827, rootNode)
    self.obj827.postAction( rootNode.CREATE )

    self.obj828=hasArgs(self)
    self.obj828.isGraphObjectVisual = True

    if(hasattr(self.obj828, '_setHierarchicalLink')):
      self.obj828._setHierarchicalLink(False)

    self.obj828.graphClass_= graph_hasArgs
    if self.genGraphics:
       new_obj = graph_hasArgs(904.0,124.0,self.obj828)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasArgs", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj828.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj828)
    self.globalAndLocalPostcondition(self.obj828, rootNode)
    self.obj828.postAction( rootNode.CREATE )

    self.obj829=hasArgs(self)
    self.obj829.isGraphObjectVisual = True

    if(hasattr(self.obj829, '_setHierarchicalLink')):
      self.obj829._setHierarchicalLink(False)

    self.obj829.graphClass_= graph_hasArgs
    if self.genGraphics:
       new_obj = graph_hasArgs(814.0,124.0,self.obj829)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasArgs", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj829.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj829)
    self.globalAndLocalPostcondition(self.obj829, rootNode)
    self.obj829.postAction( rootNode.CREATE )

    # Connections for obj779 (graphObject_: Obj676) of type MatchModel
    self.drawConnections(
(self.obj779,self.obj803,[238.0, 71.0, 240.5, 182.0],"true", 2),
(self.obj779,self.obj804,[238.0, 71.0, 404.0, 97.0],"true", 2) )
    # Connections for obj780 (graphObject_: Obj677) of type ApplyModel
    self.drawConnections(
(self.obj780,self.obj805,[243.0, 293.0, 407.5, 302.0],"true", 2),
(self.obj780,self.obj806,[243.0, 293.0, 330.5, 393.0],"true", 2),
(self.obj780,self.obj807,[243.0, 293.0, 423.5, 402.0],"true", 2),
(self.obj780,self.obj808,[243.0, 293.0, 532.5, 400.0],"true", 2) )
    # Connections for obj781 (graphObject_: Obj678) named state1
    self.drawConnections(
(self.obj781,self.obj812,[570.0, 123.0, 662.0, 100.5],"true", 2) )
    # Connections for obj782 (graphObject_: Obj679) named procdef1
    self.drawConnections(
(self.obj782,self.obj813,[572.0, 311.0, 693.0, 312.5],"true", 2),
(self.obj782,self.obj809,[572.0, 311.0, 502.0, 391.0],"true", 2),
(self.obj782,self.obj810,[572.0, 311.0, 602.0, 391.0],"true", 2),
(self.obj782,self.obj811,[572.0, 311.0, 687.0, 398.0],"true", 2),
(self.obj782,self.obj817,[572.0, 311.0, 722.0, 381.5],"true", 2) )
    # Connections for obj783 (graphObject_: Obj680) named name1
    self.drawConnections(
(self.obj783,self.obj814,[432.0, 511.0, 365.0, 535.5],"true", 2) )
    # Connections for obj784 (graphObject_: Obj681) named name2
    self.drawConnections(
(self.obj784,self.obj815,[632.0, 511.0, 639.0, 530.5],"true", 2) )
    # Connections for obj785 (graphObject_: Obj682) named name3
    self.drawConnections(
(self.obj785,self.obj816,[832.0, 511.0, 823.0, 532.5],"true", 2) )
    # Connections for obj786 (graphObject_: Obj683) named name
    self.drawConnections(
 )
    # Connections for obj787 (graphObject_: Obj684) named name
    self.drawConnections(
 )
    # Connections for obj788 (graphObject_: Obj685) named literal
    self.drawConnections(
 )
    # Connections for obj789 (graphObject_: Obj686) named literal
    self.drawConnections(
 )
    # Connections for obj790 (graphObject_: Obj687) named literal
    self.drawConnections(
 )
    # Connections for obj791 (graphObject_: Obj688) named pivot
    self.drawConnections(
 )
    # Connections for obj792 (graphObject_: Obj689) named eq1
    self.drawConnections(
(self.obj792,self.obj818,[1018.0, 279.0, 916.0, 296.5],"true", 2),
(self.obj792,self.obj823,[1018.0, 279.0, 916.0, 226.5],"true", 2) )
    # Connections for obj793 (graphObject_: Obj690) named eq2
    self.drawConnections(
(self.obj793,self.obj819,[158.0, 679.0, 246.0, 636.5],"true", 2),
(self.obj793,self.obj824,[158.0, 679.0, 282.0, 676.5],"true", 2) )
    # Connections for obj794 (graphObject_: Obj691) named eq3
    self.drawConnections(
(self.obj794,self.obj825,[478.0, 639.0, 556.0, 656.5],"true", 2),
(self.obj794,self.obj820,[478.0, 639.0, 556.0, 616.5],"true", 2) )
    # Connections for obj795 (graphObject_: Obj692) named eq4
    self.drawConnections(
(self.obj795,self.obj821,[998.0, 639.0, 906.0, 616.5],"true", 2),
(self.obj795,self.obj826,[998.0, 639.0, 906.0, 656.5],"true", 2) )
    # Connections for obj796 (graphObject_: Obj693) named eq5
    self.drawConnections(
(self.obj796,self.obj822,[1038.0, 399.0, 956.0, 396.5],"true", 2),
(self.obj796,self.obj827,[1038.0, 399.0, 1036.0, 446.5],"true", 2) )
    # Connections for obj797 (graphObject_: Obj694) named concat1
    self.drawConnections(
(self.obj797,self.obj828,[814.0, 174.0, 904.0, 124.0],"true", 2),
(self.obj797,self.obj829,[814.0, 174.0, 814.0, 124.0],"true", 2) )
    # Connections for obj798 (graphObject_: Obj695) named S
    self.drawConnections(
 )
    # Connections for obj799 (graphObject_: Obj696) named enp
    self.drawConnections(
 )
    # Connections for obj800 (graphObject_: Obj697) named exit
    self.drawConnections(
 )
    # Connections for obj801 (graphObject_: Obj698) named exack
    self.drawConnections(
 )
    # Connections for obj802 (graphObject_: Obj699) named procdef
    self.drawConnections(
 )
    # Connections for obj803 (graphObject_: Obj700) of type paired_with
    self.drawConnections(
(self.obj803,self.obj780,[240.5, 182.0, 243.0, 293.0],"true", 2) )
    # Connections for obj804 (graphObject_: Obj701) of type match_contains
    self.drawConnections(
(self.obj804,self.obj781,[404.0, 97.0, 570.0, 123.0],"true", 2) )
    # Connections for obj805 (graphObject_: Obj702) of type apply_contains
    self.drawConnections(
(self.obj805,self.obj782,[407.5, 302.0, 572.0, 311.0],"true", 2) )
    # Connections for obj806 (graphObject_: Obj703) of type apply_contains
    self.drawConnections(
(self.obj806,self.obj783,[330.5, 393.0, 432.0, 511.0],"true", 2) )
    # Connections for obj807 (graphObject_: Obj704) of type apply_contains
    self.drawConnections(
(self.obj807,self.obj784,[423.5, 402.0, 632.0, 511.0],"true", 2) )
    # Connections for obj808 (graphObject_: Obj705) of type apply_contains
    self.drawConnections(
(self.obj808,self.obj785,[532.5, 400.0, 832.0, 511.0],"true", 2) )
    # Connections for obj809 (graphObject_: Obj706) of type directLink_T
    self.drawConnections(
(self.obj809,self.obj783,[502.0, 391.0, 432.0, 511.0],"true", 2) )
    # Connections for obj810 (graphObject_: Obj707) of type directLink_T
    self.drawConnections(
(self.obj810,self.obj784,[602.0, 391.0, 632.0, 511.0],"true", 2) )
    # Connections for obj811 (graphObject_: Obj708) of type directLink_T
    self.drawConnections(
(self.obj811,self.obj785,[687.0, 398.0, 832.0, 511.0],"true", 2) )
    # Connections for obj812 (graphObject_: Obj709) of type hasAttribute_S
    self.drawConnections(
(self.obj812,self.obj786,[662.0, 100.5, 814.0, 74.0],"true", 2) )
    # Connections for obj813 (graphObject_: Obj710) of type hasAttribute_T
    self.drawConnections(
(self.obj813,self.obj787,[693.0, 312.5, 814.0, 314.0],"true", 2) )
    # Connections for obj814 (graphObject_: Obj711) of type hasAttribute_T
    self.drawConnections(
(self.obj814,self.obj788,[365.0, 535.5, 314.0, 594.0],"true", 2) )
    # Connections for obj815 (graphObject_: Obj712) of type hasAttribute_T
    self.drawConnections(
(self.obj815,self.obj789,[639.0, 530.5, 634.0, 594.0],"true", 2) )
    # Connections for obj816 (graphObject_: Obj713) of type hasAttribute_T
    self.drawConnections(
(self.obj816,self.obj790,[823.0, 532.5, 814.0, 594.0],"true", 2) )
    # Connections for obj817 (graphObject_: Obj714) of type hasAttribute_T
    self.drawConnections(
(self.obj817,self.obj791,[722.0, 381.5, 874.0, 394.0],"true", 2) )
    # Connections for obj818 (graphObject_: Obj715) of type leftExpr
    self.drawConnections(
(self.obj818,self.obj787,[916.0, 296.5, 814.0, 314.0],"true", 2) )
    # Connections for obj819 (graphObject_: Obj716) of type leftExpr
    self.drawConnections(
(self.obj819,self.obj788,[246.0, 636.5, 314.0, 594.0],"true", 2) )
    # Connections for obj820 (graphObject_: Obj717) of type leftExpr
    self.drawConnections(
(self.obj820,self.obj789,[556.0, 616.5, 634.0, 594.0],"true", 2) )
    # Connections for obj821 (graphObject_: Obj718) of type leftExpr
    self.drawConnections(
(self.obj821,self.obj790,[906.0, 616.5, 814.0, 594.0],"true", 2) )
    # Connections for obj822 (graphObject_: Obj719) of type leftExpr
    self.drawConnections(
(self.obj822,self.obj791,[956.0, 396.5, 874.0, 394.0],"true", 2) )
    # Connections for obj823 (graphObject_: Obj720) of type rightExpr
    self.drawConnections(
(self.obj823,self.obj797,[916.0, 226.5, 814.0, 174.0],"true", 2) )
    # Connections for obj824 (graphObject_: Obj721) of type rightExpr
    self.drawConnections(
(self.obj824,self.obj799,[282.0, 676.5, 314.0, 674.0],"true", 2) )
    # Connections for obj825 (graphObject_: Obj722) of type rightExpr
    self.drawConnections(
(self.obj825,self.obj800,[556.0, 656.5, 634.0, 674.0],"true", 2) )
    # Connections for obj826 (graphObject_: Obj723) of type rightExpr
    self.drawConnections(
(self.obj826,self.obj801,[906.0, 656.5, 814.0, 674.0],"true", 2) )
    # Connections for obj827 (graphObject_: Obj724) of type rightExpr
    self.drawConnections(
(self.obj827,self.obj802,[1036.0, 446.5, 1034.0, 494.0],"true", 2) )
    # Connections for obj828 (graphObject_: Obj725) of type hasArgs
    self.drawConnections(
(self.obj828,self.obj798,[904.0, 124.0, 994.0, 74.0],"true", 2) )
    # Connections for obj829 (graphObject_: Obj726) of type hasArgs
    self.drawConnections(
(self.obj829,self.obj786,[814.0, 124.0, 814.0, 74.0],"true", 2) )

newfunction = State2ProcDef_MDL

loadedMMName = 'UMLRT2Kiltera_MM_META'

atom3version = '0.3'
