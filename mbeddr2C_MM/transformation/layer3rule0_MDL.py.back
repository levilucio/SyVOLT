"""
__layer3rule0_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: levi
Modified: Sun Jan 11 20:34:56 2015
_________________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from MatchModel import *
from ApplyModel import *
from ImplementationModule_S import *
from Function import *
from Int32Type import *
from ImplementationModule_T import *
from VoidType import *
from FunctionPrototype import *
from Attribute import *
from Equation import *
from Concat import *
from Constant import *
from paired_with import *
from match_contains import *
from apply_contains import *
from directLink_T import *
from directLink_S import *
from backward_link import *
from hasAttribute_S import *
from hasAttribute_T import *
from leftExpr import *
from rightExpr import *
from hasArgs import *
from graph_Attribute import *
from graph_paired_with import *
from graph_Equation import *
from graph_backward_link import *
from graph_hasArgs import *
from graph_rightExpr import *
from graph_Concat import *
from graph_hasAttribute_T import *
from graph_directLink_T import *
from graph_directLink_S import *
from graph_Int32Type import *
from graph_ImplementationModule_T import *
from graph_Function import *
from graph_ApplyModel import *
from graph_ImplementationModule_S import *
from graph_VoidType import *
from graph_MatchModel import *
from graph_apply_contains import *
from graph_hasAttribute_S import *
from graph_FunctionPrototype import *
from graph_match_contains import *
from graph_leftExpr import *
from graph_Constant import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def layer3rule0_MDL(self, rootNode, mbeddr2C_MMRootNode=None):

    # --- Generating attributes code for ASG mbeddr2C_MM ---
    if( mbeddr2C_MMRootNode ): 
        # author
        mbeddr2C_MMRootNode.author.setValue('Annonymous')

        # description
        mbeddr2C_MMRootNode.description.setValue('\n')
        mbeddr2C_MMRootNode.description.setHeight(15)

        # name
        mbeddr2C_MMRootNode.name.setValue('layer3rule0')
    # --- ASG attributes over ---


    self.obj100=MatchModel(self)
    self.obj100.isGraphObjectVisual = True

    if(hasattr(self.obj100, '_setHierarchicalLink')):
      self.obj100._setHierarchicalLink(False)

    self.obj100.graphClass_= graph_MatchModel
    if self.genGraphics:
       new_obj = graph_MatchModel(180.0,80.0,self.obj100)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MatchModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj100.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj100)
    self.globalAndLocalPostcondition(self.obj100, rootNode)
    self.obj100.postAction( rootNode.CREATE )

    self.obj101=ApplyModel(self)
    self.obj101.isGraphObjectVisual = True

    if(hasattr(self.obj101, '_setHierarchicalLink')):
      self.obj101._setHierarchicalLink(False)

    self.obj101.graphClass_= graph_ApplyModel
    if self.genGraphics:
       new_obj = graph_ApplyModel(180.0,300.0,self.obj101)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("ApplyModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj101.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj101)
    self.globalAndLocalPostcondition(self.obj101, rootNode)
    self.obj101.postAction( rootNode.CREATE )

    self.obj102=ImplementationModule_S(self)
    self.obj102.isGraphObjectVisual = True

    if(hasattr(self.obj102, '_setHierarchicalLink')):
      self.obj102._setHierarchicalLink(False)

    # classtype
    self.obj102.classtype.setValue('ImplementationModule')

    # cardinality
    self.obj102.cardinality.setValue('+')

    # name
    self.obj102.name.setValue('s_')

    self.obj102.graphClass_= graph_ImplementationModule_S
    if self.genGraphics:
       new_obj = graph_ImplementationModule_S(400.0,100.0,self.obj102)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("ImplementationModule_S", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj102.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj102)
    self.globalAndLocalPostcondition(self.obj102, rootNode)
    self.obj102.postAction( rootNode.CREATE )

    self.obj103=Function(self)
    self.obj103.isGraphObjectVisual = True

    if(hasattr(self.obj103, '_setHierarchicalLink')):
      self.obj103._setHierarchicalLink(False)

    # classtype
    self.obj103.classtype.setValue('Function')

    # cardinality
    self.obj103.cardinality.setValue('+')

    # name
    self.obj103.name.setValue('s_')

    self.obj103.graphClass_= graph_Function
    if self.genGraphics:
       new_obj = graph_Function(640.0,100.0,self.obj103)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Function", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj103.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj103)
    self.globalAndLocalPostcondition(self.obj103, rootNode)
    self.obj103.postAction( rootNode.CREATE )

    self.obj104=Int32Type(self)
    self.obj104.isGraphObjectVisual = True

    if(hasattr(self.obj104, '_setHierarchicalLink')):
      self.obj104._setHierarchicalLink(False)

    # classtype
    self.obj104.classtype.setValue('Int32Type')

    # cardinality
    self.obj104.cardinality.setValue('+')

    # name
    self.obj104.name.setValue('s_')

    self.obj104.graphClass_= graph_Int32Type
    if self.genGraphics:
       new_obj = graph_Int32Type(880.0,100.0,self.obj104)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Int32Type", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj104.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj104)
    self.globalAndLocalPostcondition(self.obj104, rootNode)
    self.obj104.postAction( rootNode.CREATE )

    self.obj105=ImplementationModule_T(self)
    self.obj105.isGraphObjectVisual = True

    if(hasattr(self.obj105, '_setHierarchicalLink')):
      self.obj105._setHierarchicalLink(False)

    # classtype
    self.obj105.classtype.setValue('ImplementationModule')

    # cardinality
    self.obj105.cardinality.setValue('1')

    # name
    self.obj105.name.setValue('s_')

    self.obj105.graphClass_= graph_ImplementationModule_T
    if self.genGraphics:
       new_obj = graph_ImplementationModule_T(400.0,460.0,self.obj105)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("ImplementationModule_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj105.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj105)
    self.globalAndLocalPostcondition(self.obj105, rootNode)
    self.obj105.postAction( rootNode.CREATE )

    self.obj107=VoidType(self)
    self.obj107.isGraphObjectVisual = True

    if(hasattr(self.obj107, '_setHierarchicalLink')):
      self.obj107._setHierarchicalLink(False)

    # classtype
    self.obj107.classtype.setValue('VoidType')

    # cardinality
    self.obj107.cardinality.setValue('1')

    # name
    self.obj107.name.setValue('s_')

    self.obj107.graphClass_= graph_VoidType
    if self.genGraphics:
       new_obj = graph_VoidType(880.0,460.0,self.obj107)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("VoidType", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj107.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj107)
    self.globalAndLocalPostcondition(self.obj107, rootNode)
    self.obj107.postAction( rootNode.CREATE )

    self.obj106=FunctionPrototype(self)
    self.obj106.isGraphObjectVisual = True

    if(hasattr(self.obj106, '_setHierarchicalLink')):
      self.obj106._setHierarchicalLink(False)

    # classtype
    self.obj106.classtype.setValue('FunctionPrototype')

    # cardinality
    self.obj106.cardinality.setValue('1')

    # name
    self.obj106.name.setValue('s_')

    self.obj106.graphClass_= graph_FunctionPrototype
    if self.genGraphics:
       new_obj = graph_FunctionPrototype(640.0,460.0,self.obj106)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("FunctionPrototype", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj106.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj106)
    self.globalAndLocalPostcondition(self.obj106, rootNode)
    self.obj106.postAction( rootNode.CREATE )

    self.obj115=Attribute(self)
    self.obj115.isGraphObjectVisual = True

    if(hasattr(self.obj115, '_setHierarchicalLink')):
      self.obj115._setHierarchicalLink(False)

    # Type
    self.obj115.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj115.Type.config = 0

    # name
    self.obj115.name.setValue('name')

    self.obj115.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(420.0,220.0,self.obj115)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj115.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj115)
    self.globalAndLocalPostcondition(self.obj115, rootNode)
    self.obj115.postAction( rootNode.CREATE )

    self.obj119=Attribute(self)
    self.obj119.isGraphObjectVisual = True

    if(hasattr(self.obj119, '_setHierarchicalLink')):
      self.obj119._setHierarchicalLink(False)

    # Type
    self.obj119.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj119.Type.config = 0

    # name
    self.obj119.name.setValue('name')

    self.obj119.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(660.0,220.0,self.obj119)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj119.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj119)
    self.globalAndLocalPostcondition(self.obj119, rootNode)
    self.obj119.postAction( rootNode.CREATE )

    self.obj135=Attribute(self)
    self.obj135.isGraphObjectVisual = True

    if(hasattr(self.obj135, '_setHierarchicalLink')):
      self.obj135._setHierarchicalLink(False)

    # Type
    self.obj135.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj135.Type.config = 0

    # name
    self.obj135.name.setValue('ApplyAttribute')

    self.obj135.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(420.0,600.0,self.obj135)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj135.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj135)
    self.globalAndLocalPostcondition(self.obj135, rootNode)
    self.obj135.postAction( rootNode.CREATE )

    self.obj152=Attribute(self)
    self.obj152.isGraphObjectVisual = True

    if(hasattr(self.obj152, '_setHierarchicalLink')):
      self.obj152._setHierarchicalLink(False)

    # Type
    self.obj152.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj152.Type.config = 0

    # name
    self.obj152.name.setValue('name')

    self.obj152.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(660.0,600.0,self.obj152)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj152.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj152)
    self.globalAndLocalPostcondition(self.obj152, rootNode)
    self.obj152.postAction( rootNode.CREATE )

    self.obj176=Attribute(self)
    self.obj176.isGraphObjectVisual = True

    if(hasattr(self.obj176, '_setHierarchicalLink')):
      self.obj176._setHierarchicalLink(False)

    # Type
    self.obj176.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj176.Type.config = 0

    # name
    self.obj176.name.setValue('ApplyAttribute')

    self.obj176.graphClass_= graph_Attribute
    if self.genGraphics:
       new_obj = graph_Attribute(940.0,600.0,self.obj176)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Attribute", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj176.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj176)
    self.globalAndLocalPostcondition(self.obj176, rootNode)
    self.obj176.postAction( rootNode.CREATE )

    self.obj123=Equation(self)
    self.obj123.isGraphObjectVisual = True

    if(hasattr(self.obj123, '_setHierarchicalLink')):
      self.obj123._setHierarchicalLink(False)

    # name
    self.obj123.name.setValue('eq_')

    self.obj123.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(800.0,320.0,self.obj123)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj123.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj123)
    self.globalAndLocalPostcondition(self.obj123, rootNode)
    self.obj123.postAction( rootNode.CREATE )

    self.obj139=Equation(self)
    self.obj139.isGraphObjectVisual = True

    if(hasattr(self.obj139, '_setHierarchicalLink')):
      self.obj139._setHierarchicalLink(False)

    # name
    self.obj139.name.setValue('eq_')

    self.obj139.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(280.0,700.0,self.obj139)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj139.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj139)
    self.globalAndLocalPostcondition(self.obj139, rootNode)
    self.obj139.postAction( rootNode.CREATE )

    self.obj172=Equation(self)
    self.obj172.isGraphObjectVisual = True

    if(hasattr(self.obj172, '_setHierarchicalLink')):
      self.obj172._setHierarchicalLink(False)

    # name
    self.obj172.name.setValue('eq_')

    self.obj172.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(840.0,700.0,self.obj172)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj172.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj172)
    self.globalAndLocalPostcondition(self.obj172, rootNode)
    self.obj172.postAction( rootNode.CREATE )

    self.obj180=Equation(self)
    self.obj180.isGraphObjectVisual = True

    if(hasattr(self.obj180, '_setHierarchicalLink')):
      self.obj180._setHierarchicalLink(False)

    # name
    self.obj180.name.setValue('eq_')

    self.obj180.graphClass_= graph_Equation
    if self.genGraphics:
       new_obj = graph_Equation(1120.0,700.0,self.obj180)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Equation", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj180.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj180)
    self.globalAndLocalPostcondition(self.obj180, rootNode)
    self.obj180.postAction( rootNode.CREATE )

    self.obj166=Concat(self)
    self.obj166.isGraphObjectVisual = True

    if(hasattr(self.obj166, '_setHierarchicalLink')):
      self.obj166._setHierarchicalLink(False)

    # Type
    self.obj166.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj166.Type.config = 0

    # name
    self.obj166.name.setValue('exp_')

    self.obj166.graphClass_= graph_Concat
    if self.genGraphics:
       new_obj = graph_Concat(660.0,800.0,self.obj166)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Concat", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj166.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj166)
    self.globalAndLocalPostcondition(self.obj166, rootNode)
    self.obj166.postAction( rootNode.CREATE )

    self.obj124=Constant(self)
    self.obj124.isGraphObjectVisual = True

    if(hasattr(self.obj124, '_setHierarchicalLink')):
      self.obj124._setHierarchicalLink(False)

    # Type
    self.obj124.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj124.Type.config = 0

    # name
    self.obj124.name.setValue('main')

    self.obj124.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(920.0,220.0,self.obj124)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj124.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj124)
    self.globalAndLocalPostcondition(self.obj124, rootNode)
    self.obj124.postAction( rootNode.CREATE )

    self.obj140=Constant(self)
    self.obj140.isGraphObjectVisual = True

    if(hasattr(self.obj140, '_setHierarchicalLink')):
      self.obj140._setHierarchicalLink(False)

    # Type
    self.obj140.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj140.Type.config = 0

    # name
    self.obj140.name.setValue('ImplementationModule')

    self.obj140.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(420.0,800.0,self.obj140)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj140.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj140)
    self.globalAndLocalPostcondition(self.obj140, rootNode)
    self.obj140.postAction( rootNode.CREATE )

    self.obj167=Constant(self)
    self.obj167.isGraphObjectVisual = True

    if(hasattr(self.obj167, '_setHierarchicalLink')):
      self.obj167._setHierarchicalLink(False)

    # Type
    self.obj167.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj167.Type.config = 0

    # name
    self.obj167.name.setValue('_blockexpr_main_2')

    self.obj167.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(660.0,940.0,self.obj167)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj167.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj167)
    self.globalAndLocalPostcondition(self.obj167, rootNode)
    self.obj167.postAction( rootNode.CREATE )

    self.obj182=Constant(self)
    self.obj182.isGraphObjectVisual = True

    if(hasattr(self.obj182, '_setHierarchicalLink')):
      self.obj182._setHierarchicalLink(False)

    # Type
    self.obj182.Type.setValue( (['String', 'Bool', 'Integer', 'Float'], 0) )
    self.obj182.Type.config = 0

    # name
    self.obj182.name.setValue('Main2Prototype')

    self.obj182.graphClass_= graph_Constant
    if self.genGraphics:
       new_obj = graph_Constant(1020.0,820.0,self.obj182)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("Constant", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj182.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj182)
    self.globalAndLocalPostcondition(self.obj182, rootNode)
    self.obj182.postAction( rootNode.CREATE )

    self.obj108=paired_with(self)
    self.obj108.isGraphObjectVisual = True

    if(hasattr(self.obj108, '_setHierarchicalLink')):
      self.obj108._setHierarchicalLink(False)

    self.obj108.graphClass_= graph_paired_with
    if self.genGraphics:
       new_obj = graph_paired_with(300.5,222.0,self.obj108)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("paired_with", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj108.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj108)
    self.globalAndLocalPostcondition(self.obj108, rootNode)
    self.obj108.postAction( rootNode.CREATE )

    self.obj109=match_contains(self)
    self.obj109.isGraphObjectVisual = True

    if(hasattr(self.obj109, '_setHierarchicalLink')):
      self.obj109._setHierarchicalLink(False)

    self.obj109.graphClass_= graph_match_contains
    if self.genGraphics:
       new_obj = graph_match_contains(434.0,127.0,self.obj109)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("match_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj109.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj109)
    self.globalAndLocalPostcondition(self.obj109, rootNode)
    self.obj109.postAction( rootNode.CREATE )

    self.obj110=match_contains(self)
    self.obj110.isGraphObjectVisual = True

    if(hasattr(self.obj110, '_setHierarchicalLink')):
      self.obj110._setHierarchicalLink(False)

    self.obj110.graphClass_= graph_match_contains
    if self.genGraphics:
       new_obj = graph_match_contains(554.0,127.0,self.obj110)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("match_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj110.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj110)
    self.globalAndLocalPostcondition(self.obj110, rootNode)
    self.obj110.postAction( rootNode.CREATE )

    self.obj111=match_contains(self)
    self.obj111.isGraphObjectVisual = True

    if(hasattr(self.obj111, '_setHierarchicalLink')):
      self.obj111._setHierarchicalLink(False)

    self.obj111.graphClass_= graph_match_contains
    if self.genGraphics:
       new_obj = graph_match_contains(674.0,127.0,self.obj111)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("match_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj111.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj111)
    self.globalAndLocalPostcondition(self.obj111, rootNode)
    self.obj111.postAction( rootNode.CREATE )

    self.obj112=apply_contains(self)
    self.obj112.isGraphObjectVisual = True

    if(hasattr(self.obj112, '_setHierarchicalLink')):
      self.obj112._setHierarchicalLink(False)

    self.obj112.graphClass_= graph_apply_contains
    if self.genGraphics:
       new_obj = graph_apply_contains(437.5,362.0,self.obj112)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj112.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj112)
    self.globalAndLocalPostcondition(self.obj112, rootNode)
    self.obj112.postAction( rootNode.CREATE )

    self.obj113=apply_contains(self)
    self.obj113.isGraphObjectVisual = True

    if(hasattr(self.obj113, '_setHierarchicalLink')):
      self.obj113._setHierarchicalLink(False)

    self.obj113.graphClass_= graph_apply_contains
    if self.genGraphics:
       new_obj = graph_apply_contains(557.5,362.0,self.obj113)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj113.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj113)
    self.globalAndLocalPostcondition(self.obj113, rootNode)
    self.obj113.postAction( rootNode.CREATE )

    self.obj114=apply_contains(self)
    self.obj114.isGraphObjectVisual = True

    if(hasattr(self.obj114, '_setHierarchicalLink')):
      self.obj114._setHierarchicalLink(False)

    self.obj114.graphClass_= graph_apply_contains
    if self.genGraphics:
       new_obj = graph_apply_contains(677.5,362.0,self.obj114)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj114.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj114)
    self.globalAndLocalPostcondition(self.obj114, rootNode)
    self.obj114.postAction( rootNode.CREATE )

    self.obj186=directLink_T(self)
    self.obj186.isGraphObjectVisual = True

    if(hasattr(self.obj186, '_setHierarchicalLink')):
      self.obj186._setHierarchicalLink(False)

    # associationType
    self.obj186.associationType.setValue('type')

    self.obj186.graphClass_= graph_directLink_T
    if self.genGraphics:
       new_obj = graph_directLink_T(932.0,511.0,self.obj186)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("directLink_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj186.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj186)
    self.globalAndLocalPostcondition(self.obj186, rootNode)
    self.obj186.postAction( rootNode.CREATE )

    self.obj189=directLink_T(self)
    self.obj189.isGraphObjectVisual = True

    if(hasattr(self.obj189, '_setHierarchicalLink')):
      self.obj189._setHierarchicalLink(False)

    # associationType
    self.obj189.associationType.setValue('contents')

    self.obj189.graphClass_= graph_directLink_T
    if self.genGraphics:
       new_obj = graph_directLink_T(692.0,511.0,self.obj189)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("directLink_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj189.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj189)
    self.globalAndLocalPostcondition(self.obj189, rootNode)
    self.obj189.postAction( rootNode.CREATE )

    self.obj129=directLink_S(self)
    self.obj129.isGraphObjectVisual = True

    if(hasattr(self.obj129, '_setHierarchicalLink')):
      self.obj129._setHierarchicalLink(False)

    # associationType
    self.obj129.associationType.setValue('contents')

    self.obj129.graphClass_= graph_directLink_S
    if self.genGraphics:
       new_obj = graph_directLink_S(690.0,143.0,self.obj129)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("directLink_S", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj129.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj129)
    self.globalAndLocalPostcondition(self.obj129, rootNode)
    self.obj129.postAction( rootNode.CREATE )

    self.obj132=directLink_S(self)
    self.obj132.isGraphObjectVisual = True

    if(hasattr(self.obj132, '_setHierarchicalLink')):
      self.obj132._setHierarchicalLink(False)

    # associationType
    self.obj132.associationType.setValue('type')

    self.obj132.graphClass_= graph_directLink_S
    if self.genGraphics:
       new_obj = graph_directLink_S(930.0,143.0,self.obj132)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("directLink_S", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj132.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj132)
    self.globalAndLocalPostcondition(self.obj132, rootNode)
    self.obj132.postAction( rootNode.CREATE )

    self.obj151=backward_link(self)
    self.obj151.isGraphObjectVisual = True

    if(hasattr(self.obj151, '_setHierarchicalLink')):
      self.obj151._setHierarchicalLink(False)

    # type
    self.obj151.type.setValue('ruleDef')

    self.obj151.graphClass_= graph_backward_link
    if self.genGraphics:
       new_obj = graph_backward_link(571.0,327.0,self.obj151)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("backward_link", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj151.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj151)
    self.globalAndLocalPostcondition(self.obj151, rootNode)
    self.obj151.postAction( rootNode.CREATE )

    self.obj118=hasAttribute_S(self)
    self.obj118.isGraphObjectVisual = True

    if(hasattr(self.obj118, '_setHierarchicalLink')):
      self.obj118._setHierarchicalLink(False)

    self.obj118.graphClass_= graph_hasAttribute_S
    if self.genGraphics:
       new_obj = graph_hasAttribute_S(562.0,198.5,self.obj118)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_S", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj118.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj118)
    self.globalAndLocalPostcondition(self.obj118, rootNode)
    self.obj118.postAction( rootNode.CREATE )

    self.obj122=hasAttribute_S(self)
    self.obj122.isGraphObjectVisual = True

    if(hasattr(self.obj122, '_setHierarchicalLink')):
      self.obj122._setHierarchicalLink(False)

    self.obj122.graphClass_= graph_hasAttribute_S
    if self.genGraphics:
       new_obj = graph_hasAttribute_S(802.0,198.5,self.obj122)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_S", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj122.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj122)
    self.globalAndLocalPostcondition(self.obj122, rootNode)
    self.obj122.postAction( rootNode.CREATE )

    self.obj138=hasAttribute_T(self)
    self.obj138.isGraphObjectVisual = True

    if(hasattr(self.obj138, '_setHierarchicalLink')):
      self.obj138._setHierarchicalLink(False)

    self.obj138.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(563.0,572.5,self.obj138)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj138.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj138)
    self.globalAndLocalPostcondition(self.obj138, rootNode)
    self.obj138.postAction( rootNode.CREATE )

    self.obj175=hasAttribute_T(self)
    self.obj175.isGraphObjectVisual = True

    if(hasattr(self.obj175, '_setHierarchicalLink')):
      self.obj175._setHierarchicalLink(False)

    self.obj175.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(803.0,572.5,self.obj175)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj175.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj175)
    self.globalAndLocalPostcondition(self.obj175, rootNode)
    self.obj175.postAction( rootNode.CREATE )

    self.obj179=hasAttribute_T(self)
    self.obj179.isGraphObjectVisual = True

    if(hasattr(self.obj179, '_setHierarchicalLink')):
      self.obj179._setHierarchicalLink(False)

    self.obj179.graphClass_= graph_hasAttribute_T
    if self.genGraphics:
       new_obj = graph_hasAttribute_T(943.0,572.5,self.obj179)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasAttribute_T", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj179.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj179)
    self.globalAndLocalPostcondition(self.obj179, rootNode)
    self.obj179.postAction( rootNode.CREATE )

    self.obj125=leftExpr(self)
    self.obj125.isGraphObjectVisual = True

    if(hasattr(self.obj125, '_setHierarchicalLink')):
      self.obj125._setHierarchicalLink(False)

    self.obj125.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(866.0,306.5,self.obj125)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj125.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj125)
    self.globalAndLocalPostcondition(self.obj125, rootNode)
    self.obj125.postAction( rootNode.CREATE )

    self.obj143=leftExpr(self)
    self.obj143.isGraphObjectVisual = True

    if(hasattr(self.obj143, '_setHierarchicalLink')):
      self.obj143._setHierarchicalLink(False)

    self.obj143.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(486.0,686.5,self.obj143)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj143.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj143)
    self.globalAndLocalPostcondition(self.obj143, rootNode)
    self.obj143.postAction( rootNode.CREATE )

    self.obj173=leftExpr(self)
    self.obj173.isGraphObjectVisual = True

    if(hasattr(self.obj173, '_setHierarchicalLink')):
      self.obj173._setHierarchicalLink(False)

    self.obj173.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(886.0,686.5,self.obj173)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj173.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj173)
    self.globalAndLocalPostcondition(self.obj173, rootNode)
    self.obj173.postAction( rootNode.CREATE )

    self.obj181=leftExpr(self)
    self.obj181.isGraphObjectVisual = True

    if(hasattr(self.obj181, '_setHierarchicalLink')):
      self.obj181._setHierarchicalLink(False)

    self.obj181.graphClass_= graph_leftExpr
    if self.genGraphics:
       new_obj = graph_leftExpr(1166.0,686.5,self.obj181)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("leftExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj181.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj181)
    self.globalAndLocalPostcondition(self.obj181, rootNode)
    self.obj181.postAction( rootNode.CREATE )

    self.obj126=rightExpr(self)
    self.obj126.isGraphObjectVisual = True

    if(hasattr(self.obj126, '_setHierarchicalLink')):
      self.obj126._setHierarchicalLink(False)

    self.obj126.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(996.0,306.5,self.obj126)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj126.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj126)
    self.globalAndLocalPostcondition(self.obj126, rootNode)
    self.obj126.postAction( rootNode.CREATE )

    self.obj144=rightExpr(self)
    self.obj144.isGraphObjectVisual = True

    if(hasattr(self.obj144, '_setHierarchicalLink')):
      self.obj144._setHierarchicalLink(False)

    self.obj144.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(486.0,786.5,self.obj144)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj144.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj144)
    self.globalAndLocalPostcondition(self.obj144, rootNode)
    self.obj144.postAction( rootNode.CREATE )

    self.obj174=rightExpr(self)
    self.obj174.isGraphObjectVisual = True

    if(hasattr(self.obj174, '_setHierarchicalLink')):
      self.obj174._setHierarchicalLink(False)

    self.obj174.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(886.0,786.5,self.obj174)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj174.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj174)
    self.globalAndLocalPostcondition(self.obj174, rootNode)
    self.obj174.postAction( rootNode.CREATE )

    self.obj185=rightExpr(self)
    self.obj185.isGraphObjectVisual = True

    if(hasattr(self.obj185, '_setHierarchicalLink')):
      self.obj185._setHierarchicalLink(False)

    self.obj185.graphClass_= graph_rightExpr
    if self.genGraphics:
       new_obj = graph_rightExpr(1206.0,796.5,self.obj185)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("rightExpr", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj185.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj185)
    self.globalAndLocalPostcondition(self.obj185, rootNode)
    self.obj185.postAction( rootNode.CREATE )

    self.obj170=hasArgs(self)
    self.obj170.isGraphObjectVisual = True

    if(hasattr(self.obj170, '_setHierarchicalLink')):
      self.obj170._setHierarchicalLink(False)

    self.obj170.graphClass_= graph_hasArgs
    if self.genGraphics:
       new_obj = graph_hasArgs(794.0,904.0,self.obj170)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasArgs", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj170.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj170)
    self.globalAndLocalPostcondition(self.obj170, rootNode)
    self.obj170.postAction( rootNode.CREATE )

    self.obj171=hasArgs(self)
    self.obj171.isGraphObjectVisual = True

    if(hasattr(self.obj171, '_setHierarchicalLink')):
      self.obj171._setHierarchicalLink(False)

    self.obj171.graphClass_= graph_hasArgs
    if self.genGraphics:
       new_obj = graph_hasArgs(674.0,544.0,self.obj171)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("hasArgs", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj171.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj171)
    self.globalAndLocalPostcondition(self.obj171, rootNode)
    self.obj171.postAction( rootNode.CREATE )

    # Connections for obj100 (graphObject_: Obj0) of type MatchModel
    self.drawConnections(
(self.obj100,self.obj108,[298.0, 111.0, 300.5, 222.0],"true", 2),
(self.obj100,self.obj109,[298.0, 111.0, 434.0, 127.0],"true", 2),
(self.obj100,self.obj110,[298.0, 111.0, 554.0, 127.0],"true", 2),
(self.obj100,self.obj111,[298.0, 111.0, 674.0, 127.0],"true", 2) )
    # Connections for obj101 (graphObject_: Obj1) of type ApplyModel
    self.drawConnections(
(self.obj101,self.obj112,[303.0, 333.0, 437.5, 362.0],"true", 2),
(self.obj101,self.obj113,[303.0, 333.0, 557.5, 362.0],"true", 2),
(self.obj101,self.obj114,[303.0, 333.0, 677.5, 362.0],"true", 2) )
    # Connections for obj102 (graphObject_: Obj2) named s_
    self.drawConnections(
(self.obj102,self.obj118,[570.0, 143.0, 562.0, 198.5],"true", 2),
(self.obj102,self.obj129,[570.0, 143.0, 690.0, 143.0],"true", 2) )
    # Connections for obj103 (graphObject_: Obj3) named s_
    self.drawConnections(
(self.obj103,self.obj122,[810.0, 143.0, 802.0, 198.5],"true", 2),
(self.obj103,self.obj132,[810.0, 143.0, 930.0, 143.0],"true", 2) )
    # Connections for obj104 (graphObject_: Obj4) named s_
    self.drawConnections(
 )
    # Connections for obj105 (graphObject_: Obj5) named s_
    self.drawConnections(
(self.obj105,self.obj138,[572.0, 511.0, 563.0, 572.5],"true", 2),
(self.obj105,self.obj151,[572.0, 511.0, 571.0, 327.0],"true", 2),
(self.obj105,self.obj189,[572.0, 511.0, 692.0, 511.0],"true", 2) )
    # Connections for obj107 (graphObject_: Obj7) named s_
    self.drawConnections(
 )
    # Connections for obj106 (graphObject_: Obj6) named s_
    self.drawConnections(
(self.obj106,self.obj175,[812.0, 511.0, 803.0, 572.5],"true", 2),
(self.obj106,self.obj179,[812.0, 511.0, 943.0, 572.5],"true", 2),
(self.obj106,self.obj186,[812.0, 511.0, 932.0, 511.0],"true", 2) )
    # Connections for obj115 (graphObject_: Obj15) named name
    self.drawConnections(
 )
    # Connections for obj119 (graphObject_: Obj17) named name
    self.drawConnections(
 )
    # Connections for obj135 (graphObject_: Obj25) named ApplyAttribute
    self.drawConnections(
 )
    # Connections for obj152 (graphObject_: Obj32) named name
    self.drawConnections(
 )
    # Connections for obj176 (graphObject_: Obj46) named ApplyAttribute
    self.drawConnections(
 )
    # Connections for obj123 (graphObject_: Obj19) named eq_
    self.drawConnections(
(self.obj123,self.obj125,[938.0, 359.0, 866.0, 306.5],"true", 2),
(self.obj123,self.obj126,[938.0, 359.0, 996.0, 306.5],"true", 2) )
    # Connections for obj139 (graphObject_: Obj27) named eq_
    self.drawConnections(
(self.obj139,self.obj143,[418.0, 739.0, 486.0, 686.5],"true", 2),
(self.obj139,self.obj144,[418.0, 739.0, 486.0, 786.5],"true", 2) )
    # Connections for obj172 (graphObject_: Obj42) named eq_
    self.drawConnections(
(self.obj172,self.obj173,[978.0, 739.0, 886.0, 686.5],"true", 2),
(self.obj172,self.obj174,[978.0, 739.0, 886.0, 786.5],"true", 2) )
    # Connections for obj180 (graphObject_: Obj48) named eq_
    self.drawConnections(
(self.obj180,self.obj181,[1258.0, 739.0, 1166.0, 686.5],"true", 2),
(self.obj180,self.obj185,[1258.0, 739.0, 1206.0, 796.5],"true", 2) )
    # Connections for obj166 (graphObject_: Obj38) named exp_
    self.drawConnections(
(self.obj166,self.obj170,[794.0, 834.0, 794.0, 904.0],"true", 2),
(self.obj166,self.obj171,[794.0, 834.0, 674.0, 544.0],"true", 2) )
    # Connections for obj124 (graphObject_: Obj20) named main
    self.drawConnections(
 )
    # Connections for obj140 (graphObject_: Obj28) named ImplementationModule
    self.drawConnections(
 )
    # Connections for obj167 (graphObject_: Obj39) named _blockexpr_main_2
    self.drawConnections(
 )
    # Connections for obj182 (graphObject_: Obj50) named Main2Prototype
    self.drawConnections(
 )
    # Connections for obj108 (graphObject_: Obj8) of type paired_with
    self.drawConnections(
(self.obj108,self.obj101,[300.5, 222.0, 303.0, 333.0],"true", 2) )
    # Connections for obj109 (graphObject_: Obj9) of type match_contains
    self.drawConnections(
(self.obj109,self.obj102,[434.0, 127.0, 570.0, 143.0],"true", 2) )
    # Connections for obj110 (graphObject_: Obj10) of type match_contains
    self.drawConnections(
(self.obj110,self.obj103,[554.0, 127.0, 810.0, 143.0],"true", 2) )
    # Connections for obj111 (graphObject_: Obj11) of type match_contains
    self.drawConnections(
(self.obj111,self.obj104,[674.0, 127.0, 1050.0, 143.0],"true", 2) )
    # Connections for obj112 (graphObject_: Obj12) of type apply_contains
    self.drawConnections(
(self.obj112,self.obj105,[437.5, 362.0, 572.0, 511.0],"true", 2) )
    # Connections for obj113 (graphObject_: Obj13) of type apply_contains
    self.drawConnections(
(self.obj113,self.obj106,[557.5, 362.0, 812.0, 511.0],"true", 2) )
    # Connections for obj114 (graphObject_: Obj14) of type apply_contains
    self.drawConnections(
(self.obj114,self.obj107,[677.5, 362.0, 1052.0, 511.0],"true", 2) )
    # Connections for obj186 (graphObject_: Obj52) of type directLink_T
    self.drawConnections(
(self.obj186,self.obj107,[932.0, 511.0, 1052.0, 511.0],"true", 2) )
    # Connections for obj189 (graphObject_: Obj53) of type directLink_T
    self.drawConnections(
(self.obj189,self.obj106,[692.0, 511.0, 812.0, 511.0],"true", 2) )
    # Connections for obj129 (graphObject_: Obj23) of type directLink_S
    self.drawConnections(
(self.obj129,self.obj103,[690.0, 143.0, 810.0, 143.0],"true", 2) )
    # Connections for obj132 (graphObject_: Obj24) of type directLink_S
    self.drawConnections(
(self.obj132,self.obj104,[930.0, 143.0, 1050.0, 143.0],"true", 2) )
    # Connections for obj151 (graphObject_: Obj31) of type backward_link
    self.drawConnections(
(self.obj151,self.obj102,[571.0, 327.0, 570.0, 143.0],"true", 2) )
    # Connections for obj118 (graphObject_: Obj16) of type hasAttribute_S
    self.drawConnections(
(self.obj118,self.obj115,[562.0, 198.5, 554.0, 254.0],"true", 2) )
    # Connections for obj122 (graphObject_: Obj18) of type hasAttribute_S
    self.drawConnections(
(self.obj122,self.obj119,[802.0, 198.5, 794.0, 254.0],"true", 2) )
    # Connections for obj138 (graphObject_: Obj26) of type hasAttribute_T
    self.drawConnections(
(self.obj138,self.obj135,[563.0, 572.5, 554.0, 634.0],"true", 2) )
    # Connections for obj175 (graphObject_: Obj45) of type hasAttribute_T
    self.drawConnections(
(self.obj175,self.obj152,[803.0, 572.5, 794.0, 634.0],"true", 2) )
    # Connections for obj179 (graphObject_: Obj47) of type hasAttribute_T
    self.drawConnections(
(self.obj179,self.obj176,[943.0, 572.5, 1074.0, 634.0],"true", 2) )
    # Connections for obj125 (graphObject_: Obj21) of type leftExpr
    self.drawConnections(
(self.obj125,self.obj119,[866.0, 306.5, 794.0, 254.0],"true", 2) )
    # Connections for obj143 (graphObject_: Obj29) of type leftExpr
    self.drawConnections(
(self.obj143,self.obj135,[486.0, 686.5, 554.0, 634.0],"true", 2) )
    # Connections for obj173 (graphObject_: Obj43) of type leftExpr
    self.drawConnections(
(self.obj173,self.obj152,[886.0, 686.5, 794.0, 634.0],"true", 2) )
    # Connections for obj181 (graphObject_: Obj49) of type leftExpr
    self.drawConnections(
(self.obj181,self.obj176,[1166.0, 686.5, 1074.0, 634.0],"true", 2) )
    # Connections for obj126 (graphObject_: Obj22) of type rightExpr
    self.drawConnections(
(self.obj126,self.obj124,[996.0, 306.5, 1054.0, 254.0],"true", 2) )
    # Connections for obj144 (graphObject_: Obj30) of type rightExpr
    self.drawConnections(
(self.obj144,self.obj140,[486.0, 786.5, 554.0, 834.0],"true", 2) )
    # Connections for obj174 (graphObject_: Obj44) of type rightExpr
    self.drawConnections(
(self.obj174,self.obj166,[886.0, 786.5, 794.0, 834.0],"true", 2) )
    # Connections for obj185 (graphObject_: Obj51) of type rightExpr
    self.drawConnections(
(self.obj185,self.obj182,[1206.0, 796.5, 1154.0, 854.0],"true", 2) )
    # Connections for obj170 (graphObject_: Obj40) of type hasArgs
    self.drawConnections(
(self.obj170,self.obj167,[794.0, 904.0, 794.0, 974.0],"true", 2) )
    # Connections for obj171 (graphObject_: Obj41) of type hasArgs
    self.drawConnections(
(self.obj171,self.obj115,[674.0, 544.0, 554.0, 254.0],"true", 2) )

newfunction = layer3rule0_MDL

loadedMMName = 'mbeddr2C_MM_META'

atom3version = '0.3'
