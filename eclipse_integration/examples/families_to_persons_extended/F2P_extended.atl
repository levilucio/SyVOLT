-- @path Families=../input/Families_Extended.ecore
-- @path Persons=../output/Persons_Extended.ecore

module Families2Persons_Extended;
create OUT : Persons from IN : Families;

rule Country2Community {
	from
		c: Families!Country
	to
		co : Persons!Community (
			persons <- c.families -> collect(f | f.fathers),
			persons <- c.families->collect(f | f.sons),
			persons <- c.families->collect(f | f.daughters),
			townHalls <- c.cities,
			associations <- c.cities->collect(cty | cty.companies -> collect(cmp|Tuple{ct=cty,cm=cmp}))
		)
}
			
rule Father2Man {
	from
		p : Families!Parent (p.family.fathers.includes(p))
	to
		m : Persons!Man (
			fullName <- p.firstName + p.family.lastName	
		)
}

rule Mother2Woman {
	from
		p : Families!Parent (p.family.mothers.includes(p))
	to
		w : Persons!Woman (
			fullName <- p.firstName + p.family.lastName
		)
}

rule Daughter2Woman {
	from
		ch : Families!Child (ch.family.daughters.includes(ch))
	to
		w : Persons!Woman (
			fullName <- ch.firstName + ch.family.lastName	
		)
}

rule Son2Man {
	from
		ch : Families!Child (ch.family.sons.includes(ch))
	to
		m : Persons!Man (
			fullName <- ch.firstName + ch.family.lastName
		)
}			
			
rule City2TownHall{
	from
	  c : Families!City
	to
	  t : Persons!TownHall(
	  	name <- c.name + ' TownHall',
		workers <- c.companies -> collect(cmp | cmp.employees) -> flatten() -> select(em | em.livesIn = c),
		committee <- cmt,
		districts <- c.neighborhoods
	  ),
	  cmt : Persons!Committee(
	  	name <- c.name + ' TownHall Committee'	
	  )
}


rule CityCompany2Association{
	from
		ct : Families!City, cm : Families!Company (ct.companies.includes(cm))
	to
		a : Persons!Association(
			name <- ct.name + cm.name,
			committee <- thisModule.resolveTemp(ct, 'cmt')
		)
}

rule Neighborhood2District{
	from
		n : Families!Neighborhood (Families!Family.allInstances() -> exists(f | f.registeredIn = n))
	to
		d : Persons!District(
			name <- n.name,
			facilities <- n.schools -> select(sch | sch.ordinary -> notEmpty()) -> collect(sch | thisModule.createOrdinaryFacility(sch)),
			facilities <- n.schools -> select(sch | sch.special -> notEmpty()) -> collect(sch | thisModule.createSpecialFacility(sch))
		)
}

lazy rule createOrdinaryFacility{
	from
		sch : Families!School
	to
		os : Persons!OrdinaryFacility(
			name <- 'Ordinary Facility Service for school ' + sch.name,
			members <- sch.students
		)
}

lazy rule createSpecialFacility{
	from
		sch : Families!School
	to
		os : Persons!SpecialFacility(
			name <- 'Special Facility Service for school ' + sch.name,
			members <- sch.students
		)
}