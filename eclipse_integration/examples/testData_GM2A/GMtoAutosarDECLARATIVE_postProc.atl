module INDtoAutosarDECLARATIVE_postProc;
-- @nsURI autosarMM=http://autosar.org/3.1.0
-- @nsURI industrialMM=http://www.mdworkbench.com/INDmm

create OUT : autosarMM from IN : indMM;

--Matched Rule: Matches any Module in the industrial model
--into a SwCompToEcuMapping_component that references a Component Prototype
rule createComponent{ 
	from m:indMM!Module 
	to 
	mapComp: autosarMM!SwCompToEcuMapping_component(
		componentPrototype <- Set{comp} 
		),
	comp: autosarMM!ComponentPrototype(
		shortName <-m.name
		)	
}

-- matched rule: matches any PhysicalNode element (and all its attributes/references) 
-- in a industrial model into a System template/PhysicalNode Extract (and all its attributes/references)
-- in its equivalent autosar model

rule initSysTemp{
	from physNode: indMM!PhysicalNode 	(physNode.partition->exists(part|part.module->notEmpty()))
	to 
	sysmapping: autosarMM!SystemMapping(
		shortName <-'SysMapping_' + physNode.name,
		swMapping<- physNode.partition->collect(part|thisModule.resolveTemp(part, 'mapping'))
	),
	sys: autosarMM!System (
		shortName<-'SysTemplate_' + physNode.name,
		mapping <-sysmapping,
		softwareComposition <-swCompos
	),
	swCompos: autosarMM!SoftwareComposition(
		shortName<-'SoftwareComposition_' + physNode.name,
		softwareComposition <-compostype
	),
	compostype:autosarMM!CompositionType(
		shortName <- 'CompositionType_' + physNode.name,
		component <- physNode.partition->collect(part|part.module)->flatten()->collect(d|thisModule.resolveTemp(d, 'comp')),
		port <- physNode.partition->collect(part | part.module)->flatten()->collect(d|d.scheduler)->flatten()->select(e|e.required->notEmpty())->collect(e|thisModule.createRPort(e)),
		port <-	physNode.partition->collect(part | part.module)->flatten()->collect(d|d.scheduler)->flatten()->select(e|e.provided->notEmpty())->collect(e|thisModule.createPPort(e))
	),
	EcuInst :autosarMM!EcuInstance (
		shortName<-'EcuInstance_'+physNode.name
	)
}


--LAZY RULE: creates a single PPortPrototype from an Scheduler
-- Uses the 'Name' of the Scheduler to generate the 'shortName'
--     of the PPortPrototype... 
lazy rule createPPort {
   from
     sched: indMM!Scheduler
   to 
     newPport:autosarMM!PPortPrototype (
     	shortName <- sched.name+'PROV'
		)
 }


--LAZY RULE: creates a single RPortPrototype from an Scheduler 
--Uses the 'Name' of the Scheduler to generate the 'shortName'
--     of the RPortPrototype... 
lazy rule createRPort {
   from
     sched: indMM!Scheduler
   to 
     newRport:autosarMM!RPortPrototype (
     	shortName <- sched.name+'REQ'
		)
 }


-- Matched Rule : maps a Partition to a Swc2EcuMapping 
-- -- uses the 'shortName' of the Partition to produce the 'shortName' of the Swc2EcuMapping
-- -- Sets the 'component' reference using the generateComponents function
-- -- Sets the ecuInstance using resolveTemp on the physNode encapsulating the current Partition being mapped
rule initSingleSwc2EcuMapping {
   from
     part:indMM!Partition ((indMM!PhysicalNode.allInstances()->one(physNode|physNode.partition->includes(part)))and(part.module->notEmpty()))
   to 
        -- why did fabian use a different type to map the next step? resolved -> should work
   		mapping:autosarMM!SwcToEcuMapping (
     	shortName <- 'Swc2EcuMapping_'+part.name, --was part.ShortName
		
		-- why does this next one not work for Fabian
		component <- part.module -> collect(d|thisModule.resolveTemp(d, 'mapComp')),
		ecuInstance <- thisModule.resolveTemp((indMM!PhysicalNode.allInstances()->select(pn|pn.partition->includes(part)))->first(),'EcuInst')
		)
}