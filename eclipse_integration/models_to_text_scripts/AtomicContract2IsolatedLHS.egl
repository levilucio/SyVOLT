[%
var matchClassNodeMap : new Map;

var nodeIndex = 0;

var pythonClassName = "H"+contract.name+"_IsolatedLHS";


%]
from core.himesis import Himesis, HimesisPreConditionPatternLHS
import uuid

class [%= pythonClassName %](HimesisPreConditionPatternLHS):
        def __init__(self):
                """
        Creates the himesis graph representing the AToM3 model [%= pythonClassName %].
                """
        # Flag this instance as compiled now
                self.is_compiled = True
        
                super([%= pythonClassName%], self).__init__(name='[%= pythonClassName %]', num_nodes=0, edges=[])
        
        # Add the edges
                self.add_edges([])
        
        # Set the graph attributes
                self["mm__"] = ['MT_pre__FamiliesToPersonsMM', 'MoTifRule']
                self["MT_constraint__"] = """#===============================================================================
# This code is executed after the nodes in the LHS have been matched.
# You can access a matched node labelled n by: PreNode('n').
# To access attribute x of node n, use: PreNode('n')['x'].
# The given constraint must evaluate to a boolean expression:
#    returning True enables the rule to be applied,
#    returning False forbids the rule from being applied.
#===============================================================================

return True
"""
                self["name"] = """"""
                self["GUID__"] = uuid.uuid3(uuid.NAMESPACE_DNS,'[%=contract.name%]')
        
        # Set the node attributes
        
        [%
        
                for(class in contract.match.first.class){
                        matchClassNodeMap.put(class, nodeIndex);
                        var classLabel = nodeIndex + 1;
                        %]
        # match class [%=class.className%]([%=class.id%]) node
                self.add_node()
                self.vs[[%=nodeIndex%]]["MT_pre__attr1"] = """
#===============================================================================
# This code is executed when evaluating if a node shall be matched by this rule.
# You can access the value of the current node's attribute value by: attr_value.
# You can access any attribute x of this node by: this['x'].
# If the constraint relies on attribute values from other nodes,
# use the LHS/NAC constraint instead.
# The given constraint must evaluate to a boolean expression.
#===============================================================================

return True
"""
                self.vs[[%=nodeIndex%]]["MT_label__"] = """[%=classLabel%]"""
                self.vs[[%=nodeIndex%]]["MT_dirty__"] = False
                self.vs[[%=nodeIndex%]]["mm__"] = """MT_pre__[%=class.className%]"""
                self.vs[[%=nodeIndex%]]["GUID__"] = uuid.uuid3(uuid.NAMESPACE_DNS,'[%=class.id%]')
                [%
                nodeIndex = nodeIndex + 1;
        }    
        %]
        
                # Add the attribute equations
                self["equations"] = []    
        
        [%
        // define evaluation methods for each class.
                for(class in contract.match.first.class){
                        var classLabel = matchClassNodeMap.get(class) + 1;
                        %]
        def eval_attr1[%= classLabel %](self, attr_value, this):
        
                #===============================================================================
                # This code is executed when evaluating if a node shall be matched by this rule.
                # You can access the value of the current node's attribute value by: attr_value.
                # You can access any attribute x of this node by: this['x'].
                # If the constraint relies on attribute values from other nodes,
                # use the LHS/NAC constraint instead.
                # The given constraint must evaluate to a boolean expression.
                #===============================================================================

                return True
        
                [%
        }
        %]
        
        def constraint(self, PreNode, graph):
                """
                Executable constraint code.
                @param PreNode: Function taking an integer as parameter
                                        and returns the node corresponding to that label.
                """
        #===============================================================================
        # This code is executed after the nodes in the LHS have been matched.
        # You can access a matched node labelled n by: PreNode('n').
        # To access attribute x of node n, use: PreNode('n')['x'].
        # The given constraint must evaluate to a boolean expression:
        #    returning True enables the rule to be applied,
        #    returning False forbids the rule from being applied.
        #===============================================================================
        
                return True
        
        
