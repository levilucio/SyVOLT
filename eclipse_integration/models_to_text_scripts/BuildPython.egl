[%
var ruleIndex = 0;
var ruleShortMap : new Map;
var transformationArrayStr = "";
var lastLayerTreated = "";
var inputMM = "";
var outputMM = "";
%]

from util.parser import load_parser

from util.test_script_base import Test

class ProverTest(Test):

    def __init__(self):
        super(ProverTest, self).__init__()

        #============TRANSFORMATION=================
        [*- get all the rules from the files generated to disk *]
        [% for (r in Rule.all) { %]
        r[%=ruleIndex%] = 'H[%=r.Description%]'
        [% ruleShortMap.put(r, ruleIndex);
            ruleIndex = ruleIndex + 1;
           }
        %]    
        
        [*- build the transformation array with the right layering *]                     
        [% 
        for (l in Sequential) {
            for (prev in l.previousSource) {
                if (prev.isKindOf(FilePort)) {
                    transformationArrayStr = transformationArrayStr + "[";
                    for (r in l.hasRule) {
                        transformationArrayStr = transformationArrayStr + "r" + ruleShortMap.get(r) + (",");
                    }
                    transformationArrayStr = transformationArrayStr + "],";
                    lastLayerTreated = l.Name;
                    inputMM = prev.metaModelId.metaModelURI;
                    break;
                 }
             }
        }
        
        
        for (l in Sequential) {
            for (prev in l.previousSource) {
                if (prev.isKindOf(Sequential) and prev.Name == lastLayerTreated) {
                    transformationArrayStr = transformationArrayStr + "[";
                    for (r in l.hasRule) {
                        transformationArrayStr = transformationArrayStr + "r" + ruleShortMap.get(r) + (",");
                    }
                    transformationArrayStr = transformationArrayStr + "],";
                    lastLayerTreated = l.Name;
                    outputMM = l.metaModelId.metaModelURI;
                                
                    break;
                }
            }
         }
        
        
        %]
        self.full_transformation = [[%=transformationArrayStr%]]

        self.transformation_directory = "[%=absoluteBackendPath%]/transformation"


        #=====METAMODELS===============

        self.inputMM = "[%=absoluteBackendPath%]/[%=inputMM%]"
        self.outputMM = "[%=absoluteBackendPath%]/[%=outputMM%]"


        #====CONTRACTS==================

        self.contract_directory = "[%=absoluteBackendPath%]/contracts/"

        self.atomic_contracts = [
            [%
	        for (ac in inputProperties!AtomicContract) { %]
	                "[%=ac.Name%]",
	        [%}%] 
        ]

        self.if_then_contracts = []

        self.prop_if_then_contracts = []


        #=========PC SAVE LOCATION

        self.pc_save_filename = "pcs_[%=transformationName%].txt"



if __name__ == "__main__":
    parser = load_parser()
    args = parser.parse_args()

    test = ProverTest()
    test.test_correct(args)

    
