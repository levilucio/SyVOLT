"""
__ConnectRPortPrototype_Back_CompositionType2ECU_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: gehan
Modified: Thu May 16 16:45:05 2013
____________________________________________________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from MT_pre__MatchModel import *
from MT_pre__ApplyModel import *
from MT_pre__ECU import *
from MT_pre__CompositionType import *
from MT_pre__paired_with import *
from MT_pre__match_contains import *
from MT_pre__apply_contains import *
from MT_pre__backward_link import *
from LHS import *
from graph_MT_pre__paired_with import *
from graph_MT_pre__apply_contains import *
from graph_LHS import *
from graph_MT_pre__CompositionType import *
from graph_MT_pre__match_contains import *
from graph_MT_pre__MatchModel import *
from graph_MT_pre__ApplyModel import *
from graph_MT_pre__backward_link import *
from graph_MT_pre__ECU import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def ConnectRPortPrototype_Back_CompositionType2ECU_MDL(self, rootNode, MT_pre__GM2AUTOSAR_MMRootNode=None, MoTifRuleRootNode=None):

    # --- Generating attributes code for ASG MT_pre__GM2AUTOSAR_MM ---
    if( MT_pre__GM2AUTOSAR_MMRootNode ): 
        # author
        MT_pre__GM2AUTOSAR_MMRootNode.author.setValue('Annonymous')

        # description
        MT_pre__GM2AUTOSAR_MMRootNode.description.setValue('\n')
        MT_pre__GM2AUTOSAR_MMRootNode.description.setHeight(15)

        # name
        MT_pre__GM2AUTOSAR_MMRootNode.name.setValue('')
        MT_pre__GM2AUTOSAR_MMRootNode.name.setNone()
    # --- ASG attributes over ---


    # --- Generating attributes code for ASG MoTifRule ---
    if( MoTifRuleRootNode ): 
        # author
        MoTifRuleRootNode.author.setValue('Annonymous')

        # description
        MoTifRuleRootNode.description.setValue('\n')
        MoTifRuleRootNode.description.setHeight(15)

        # name
        MoTifRuleRootNode.name.setValue('ConnectRPortPrototype_Back_CompositionType2ECU')
    # --- ASG attributes over ---


    self.obj250=MT_pre__MatchModel(self)
    self.obj250.isGraphObjectVisual = True

    if(hasattr(self.obj250, '_setHierarchicalLink')):
      self.obj250._setHierarchicalLink(False)

    # MT_label__
    self.obj250.MT_label__.setValue('1')

    # MT_pivotOut__
    self.obj250.MT_pivotOut__.setValue('')
    self.obj250.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj250.MT_subtypeMatching__.setValue(('True', 0))
    self.obj250.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj250.MT_pivotIn__.setValue('')
    self.obj250.MT_pivotIn__.setNone()

    self.obj250.graphClass_= graph_MT_pre__MatchModel
    if self.genGraphics:
       new_obj = graph_MT_pre__MatchModel(60.0,80.0,self.obj250)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__MatchModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj250.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj250)
    self.globalAndLocalPostcondition(self.obj250, rootNode)
    self.obj250.postAction( rootNode.CREATE )

    self.obj251=MT_pre__ApplyModel(self)
    self.obj251.isGraphObjectVisual = True

    if(hasattr(self.obj251, '_setHierarchicalLink')):
      self.obj251._setHierarchicalLink(False)

    # MT_label__
    self.obj251.MT_label__.setValue('2')

    # MT_pivotOut__
    self.obj251.MT_pivotOut__.setValue('')
    self.obj251.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj251.MT_subtypeMatching__.setValue(('True', 0))
    self.obj251.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj251.MT_pivotIn__.setValue('')
    self.obj251.MT_pivotIn__.setNone()

    self.obj251.graphClass_= graph_MT_pre__ApplyModel
    if self.genGraphics:
       new_obj = graph_MT_pre__ApplyModel(60.0,300.0,self.obj251)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__ApplyModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj251.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj251)
    self.globalAndLocalPostcondition(self.obj251, rootNode)
    self.obj251.postAction( rootNode.CREATE )

    self.obj254=MT_pre__ECU(self)
    self.obj254.isGraphObjectVisual = True

    if(hasattr(self.obj254, '_setHierarchicalLink')):
      self.obj254._setHierarchicalLink(False)

    # MT_pivotOut__
    self.obj254.MT_pivotOut__.setValue('')
    self.obj254.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj254.MT_subtypeMatching__.setValue(('True', 0))
    self.obj254.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj254.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj254.MT_pre__classtype.setHeight(15)

    # MT_pivotIn__
    self.obj254.MT_pivotIn__.setValue('')
    self.obj254.MT_pivotIn__.setNone()

    # MT_label__
    self.obj254.MT_label__.setValue('5')

    # MT_pre__name
    self.obj254.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj254.MT_pre__name.setHeight(15)

    self.obj254.graphClass_= graph_MT_pre__ECU
    if self.genGraphics:
       new_obj = graph_MT_pre__ECU(260.0,80.0,self.obj254)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__ECU", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj254.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj254)
    self.globalAndLocalPostcondition(self.obj254, rootNode)
    self.obj254.postAction( rootNode.CREATE )

    self.obj253=MT_pre__CompositionType(self)
    self.obj253.isGraphObjectVisual = True

    if(hasattr(self.obj253, '_setHierarchicalLink')):
      self.obj253._setHierarchicalLink(False)

    # MT_pivotOut__
    self.obj253.MT_pivotOut__.setValue('')
    self.obj253.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj253.MT_subtypeMatching__.setValue(('True', 0))
    self.obj253.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj253.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj253.MT_pre__classtype.setHeight(15)

    # MT_pivotIn__
    self.obj253.MT_pivotIn__.setValue('')
    self.obj253.MT_pivotIn__.setNone()

    # MT_label__
    self.obj253.MT_label__.setValue('4')

    # MT_pre__name
    self.obj253.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj253.MT_pre__name.setHeight(15)

    self.obj253.graphClass_= graph_MT_pre__CompositionType
    if self.genGraphics:
       new_obj = graph_MT_pre__CompositionType(240.0,300.0,self.obj253)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__CompositionType", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj253.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj253)
    self.globalAndLocalPostcondition(self.obj253, rootNode)
    self.obj253.postAction( rootNode.CREATE )

    self.obj252=MT_pre__paired_with(self)
    self.obj252.isGraphObjectVisual = True

    if(hasattr(self.obj252, '_setHierarchicalLink')):
      self.obj252._setHierarchicalLink(False)

    # MT_label__
    self.obj252.MT_label__.setValue('3')

    # MT_pivotOut__
    self.obj252.MT_pivotOut__.setValue('')
    self.obj252.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj252.MT_subtypeMatching__.setValue(('True', 0))
    self.obj252.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj252.MT_pivotIn__.setValue('')
    self.obj252.MT_pivotIn__.setNone()

    self.obj252.graphClass_= graph_MT_pre__paired_with
    if self.genGraphics:
       new_obj = graph_MT_pre__paired_with(223.5,263.5,self.obj252)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__paired_with", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj252.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj252)
    self.globalAndLocalPostcondition(self.obj252, rootNode)
    self.obj252.postAction( rootNode.CREATE )

    self.obj255=MT_pre__match_contains(self)
    self.obj255.isGraphObjectVisual = True

    if(hasattr(self.obj255, '_setHierarchicalLink')):
      self.obj255._setHierarchicalLink(False)

    # MT_label__
    self.obj255.MT_label__.setValue('6')

    # MT_pivotOut__
    self.obj255.MT_pivotOut__.setValue('')
    self.obj255.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj255.MT_subtypeMatching__.setValue(('True', 0))
    self.obj255.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj255.MT_pivotIn__.setValue('')
    self.obj255.MT_pivotIn__.setNone()

    self.obj255.graphClass_= graph_MT_pre__match_contains
    if self.genGraphics:
       new_obj = graph_MT_pre__match_contains(324.5,153.5,self.obj255)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__match_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj255.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj255)
    self.globalAndLocalPostcondition(self.obj255, rootNode)
    self.obj255.postAction( rootNode.CREATE )

    self.obj256=MT_pre__apply_contains(self)
    self.obj256.isGraphObjectVisual = True

    if(hasattr(self.obj256, '_setHierarchicalLink')):
      self.obj256._setHierarchicalLink(False)

    # MT_label__
    self.obj256.MT_label__.setValue('7')

    # MT_pivotOut__
    self.obj256.MT_pivotOut__.setValue('')
    self.obj256.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj256.MT_subtypeMatching__.setValue(('True', 0))
    self.obj256.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj256.MT_pivotIn__.setValue('')
    self.obj256.MT_pivotIn__.setNone()

    self.obj256.graphClass_= graph_MT_pre__apply_contains
    if self.genGraphics:
       new_obj = graph_MT_pre__apply_contains(318.0,373.5,self.obj256)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj256.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj256)
    self.globalAndLocalPostcondition(self.obj256, rootNode)
    self.obj256.postAction( rootNode.CREATE )

    self.obj257=MT_pre__backward_link(self)
    self.obj257.isGraphObjectVisual = True

    if(hasattr(self.obj257, '_setHierarchicalLink')):
      self.obj257._setHierarchicalLink(False)

    # MT_label__
    self.obj257.MT_label__.setValue('8')

    # MT_pivotOut__
    self.obj257.MT_pivotOut__.setValue('')
    self.obj257.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj257.MT_subtypeMatching__.setValue(('True', 0))
    self.obj257.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj257.MT_pivotIn__.setValue('')
    self.obj257.MT_pivotIn__.setNone()

    self.obj257.graphClass_= graph_MT_pre__backward_link
    if self.genGraphics:
       new_obj = graph_MT_pre__backward_link(419.0,263.5,self.obj257)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__backward_link", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj257.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj257)
    self.globalAndLocalPostcondition(self.obj257, rootNode)
    self.obj257.postAction( rootNode.CREATE )

    self.obj249=LHS(self)
    self.obj249.isGraphObjectVisual = True

    if(hasattr(self.obj249, '_setHierarchicalLink')):
      self.obj249._setHierarchicalLink(False)

    # constraint
    self.obj249.constraint.setValue('#===============================================================================\n# This code is executed after the nodes in the LHS have been matched.\n# You can access a matched node labelled n by: PreNode(\'n\').\n# To access attribute x of node n, use: PreNode(\'n\')[\'x\'].\n# The given constraint must evaluate to a boolean expression:\n#    returning True enables the rule to be applied,\n#    returning False forbids the rule from being applied.\n#===============================================================================\n\nreturn True\n')
    self.obj249.constraint.setHeight(15)

    self.obj249.graphClass_= graph_LHS
    if self.genGraphics:
       new_obj = graph_LHS(40.0,40.0,self.obj249)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("LHS", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj249.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj249)
    self.globalAndLocalPostcondition(self.obj249, rootNode)
    self.obj249.postAction( rootNode.CREATE )

    # Connections for obj250 (graphObject_: Obj86) of type MT_pre__MatchModel
    self.drawConnections(
(self.obj250,self.obj252,[219.0, 153.0, 223.5, 263.5],"true", 2),
(self.obj250,self.obj255,[219.0, 153.0, 324.5, 153.5],"true", 2) )
    # Connections for obj251 (graphObject_: Obj87) of type MT_pre__ApplyModel
    self.drawConnections(
(self.obj251,self.obj256,[228.0, 374.0, 318.0, 373.5],"true", 2) )
    # Connections for obj254 (graphObject_: Obj90) of type MT_pre__ECU
    self.drawConnections(
 )
    # Connections for obj253 (graphObject_: Obj89) of type MT_pre__CompositionType
    self.drawConnections(
(self.obj253,self.obj257,[408.0, 373.0, 419.0, 263.5],"true", 2) )
    # Connections for obj252 (graphObject_: Obj88) of type MT_pre__paired_with
    self.drawConnections(
(self.obj252,self.obj251,[223.5, 263.5, 228.0, 374.0],"true", 2) )
    # Connections for obj255 (graphObject_: Obj91) of type MT_pre__match_contains
    self.drawConnections(
(self.obj255,self.obj254,[324.5, 153.5, 430.0, 154.0],"true", 2) )
    # Connections for obj256 (graphObject_: Obj92) of type MT_pre__apply_contains
    self.drawConnections(
(self.obj256,self.obj253,[318.0, 373.5, 408.0, 373.0],"true", 2) )
    # Connections for obj257 (graphObject_: Obj93) of type MT_pre__backward_link
    self.drawConnections(
(self.obj257,self.obj254,[419.0, 263.5, 430.0, 154.0],"true", 2) )
    # Connections for obj249 (graphObject_: Obj85) of type LHS
    self.drawConnections(
 )

newfunction = ConnectRPortPrototype_Back_CompositionType2ECU_MDL

loadedMMName = ['MT_pre__GM2AUTOSAR_MM_META', 'MoTifRule_META']

atom3version = '0.3'
