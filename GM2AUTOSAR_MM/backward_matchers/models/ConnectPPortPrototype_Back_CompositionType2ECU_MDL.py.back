"""
__ConnectPPortPrototype_Back_CompositionType2ECU_MDL.py_____________________________________________________

Automatically generated AToM3 Model File (Do not modify directly)
Author: gehan
Modified: Thu May 16 16:39:56 2013
____________________________________________________________________________________________________________
"""
from stickylink import *
from widthXfillXdecoration import *
from MT_pre__MatchModel import *
from MT_pre__ApplyModel import *
from MT_pre__ECU import *
from MT_pre__CompositionType import *
from MT_pre__paired_with import *
from MT_pre__match_contains import *
from MT_pre__apply_contains import *
from MT_pre__backward_link import *
from LHS import *
from graph_MT_pre__paired_with import *
from graph_MT_pre__apply_contains import *
from graph_LHS import *
from graph_MT_pre__CompositionType import *
from graph_MT_pre__match_contains import *
from graph_MT_pre__MatchModel import *
from graph_MT_pre__ApplyModel import *
from graph_MT_pre__backward_link import *
from graph_MT_pre__ECU import *
from ATOM3Enum import *
from ATOM3String import *
from ATOM3BottomType import *
from ATOM3Constraint import *
from ATOM3Attribute import *
from ATOM3Float import *
from ATOM3List import *
from ATOM3Link import *
from ATOM3Connection import *
from ATOM3Boolean import *
from ATOM3Appearance import *
from ATOM3Text import *
from ATOM3Action import *
from ATOM3Integer import *
from ATOM3Port import *
from ATOM3MSEnum import *

def ConnectPPortPrototype_Back_CompositionType2ECU_MDL(self, rootNode, MT_pre__GM2AUTOSAR_MMRootNode=None, MoTifRuleRootNode=None):

    # --- Generating attributes code for ASG MT_pre__GM2AUTOSAR_MM ---
    if( MT_pre__GM2AUTOSAR_MMRootNode ): 
        # author
        MT_pre__GM2AUTOSAR_MMRootNode.author.setValue('Annonymous')

        # description
        MT_pre__GM2AUTOSAR_MMRootNode.description.setValue('\n')
        MT_pre__GM2AUTOSAR_MMRootNode.description.setHeight(15)

        # name
        MT_pre__GM2AUTOSAR_MMRootNode.name.setValue('')
        MT_pre__GM2AUTOSAR_MMRootNode.name.setNone()
    # --- ASG attributes over ---


    # --- Generating attributes code for ASG MoTifRule ---
    if( MoTifRuleRootNode ): 
        # author
        MoTifRuleRootNode.author.setValue('Annonymous')

        # description
        MoTifRuleRootNode.description.setValue('\n')
        MoTifRuleRootNode.description.setHeight(15)

        # name
        MoTifRuleRootNode.name.setValue('ConnectPPortPrototype_Back_CompositionType2ECU')
    # --- ASG attributes over ---


    self.obj233=MT_pre__MatchModel(self)
    self.obj233.isGraphObjectVisual = True

    if(hasattr(self.obj233, '_setHierarchicalLink')):
      self.obj233._setHierarchicalLink(False)

    # MT_label__
    self.obj233.MT_label__.setValue('1')

    # MT_pivotOut__
    self.obj233.MT_pivotOut__.setValue('')
    self.obj233.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj233.MT_subtypeMatching__.setValue(('True', 0))
    self.obj233.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj233.MT_pivotIn__.setValue('')
    self.obj233.MT_pivotIn__.setNone()

    self.obj233.graphClass_= graph_MT_pre__MatchModel
    if self.genGraphics:
       new_obj = graph_MT_pre__MatchModel(40.0,60.0,self.obj233)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__MatchModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj233.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj233)
    self.globalAndLocalPostcondition(self.obj233, rootNode)
    self.obj233.postAction( rootNode.CREATE )

    self.obj234=MT_pre__ApplyModel(self)
    self.obj234.isGraphObjectVisual = True

    if(hasattr(self.obj234, '_setHierarchicalLink')):
      self.obj234._setHierarchicalLink(False)

    # MT_label__
    self.obj234.MT_label__.setValue('2')

    # MT_pivotOut__
    self.obj234.MT_pivotOut__.setValue('')
    self.obj234.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj234.MT_subtypeMatching__.setValue(('True', 0))
    self.obj234.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj234.MT_pivotIn__.setValue('')
    self.obj234.MT_pivotIn__.setNone()

    self.obj234.graphClass_= graph_MT_pre__ApplyModel
    if self.genGraphics:
       new_obj = graph_MT_pre__ApplyModel(40.0,300.0,self.obj234)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__ApplyModel", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj234.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj234)
    self.globalAndLocalPostcondition(self.obj234, rootNode)
    self.obj234.postAction( rootNode.CREATE )

    self.obj237=MT_pre__ECU(self)
    self.obj237.isGraphObjectVisual = True

    if(hasattr(self.obj237, '_setHierarchicalLink')):
      self.obj237._setHierarchicalLink(False)

    # MT_pivotOut__
    self.obj237.MT_pivotOut__.setValue('')
    self.obj237.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj237.MT_subtypeMatching__.setValue(('True', 0))
    self.obj237.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj237.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj237.MT_pre__classtype.setHeight(15)

    # MT_pivotIn__
    self.obj237.MT_pivotIn__.setValue('')
    self.obj237.MT_pivotIn__.setNone()

    # MT_label__
    self.obj237.MT_label__.setValue('5')

    # MT_pre__name
    self.obj237.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj237.MT_pre__name.setHeight(15)

    self.obj237.graphClass_= graph_MT_pre__ECU
    if self.genGraphics:
       new_obj = graph_MT_pre__ECU(240.0,120.0,self.obj237)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__ECU", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj237.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj237)
    self.globalAndLocalPostcondition(self.obj237, rootNode)
    self.obj237.postAction( rootNode.CREATE )

    self.obj236=MT_pre__CompositionType(self)
    self.obj236.isGraphObjectVisual = True

    if(hasattr(self.obj236, '_setHierarchicalLink')):
      self.obj236._setHierarchicalLink(False)

    # MT_pivotOut__
    self.obj236.MT_pivotOut__.setValue('')
    self.obj236.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj236.MT_subtypeMatching__.setValue(('True', 0))
    self.obj236.MT_subtypeMatching__.config = 0

    # MT_pre__classtype
    self.obj236.MT_pre__classtype.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj236.MT_pre__classtype.setHeight(15)

    # MT_pivotIn__
    self.obj236.MT_pivotIn__.setValue('')
    self.obj236.MT_pivotIn__.setNone()

    # MT_label__
    self.obj236.MT_label__.setValue('4')

    # MT_pre__name
    self.obj236.MT_pre__name.setValue('\n#===============================================================================\n# This code is executed when evaluating if a node shall be matched by this rule.\n# You can access the value of the current node\'s attribute value by: attr_value.\n# You can access any attribute x of this node by: this[\'x\'].\n# If the constraint relies on attribute values from other nodes,\n# use the LHS/NAC constraint instead.\n# The given constraint must evaluate to a boolean expression.\n#===============================================================================\n\nreturn True\n')
    self.obj236.MT_pre__name.setHeight(15)

    self.obj236.graphClass_= graph_MT_pre__CompositionType
    if self.genGraphics:
       new_obj = graph_MT_pre__CompositionType(240.0,260.0,self.obj236)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__CompositionType", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj236.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj236)
    self.globalAndLocalPostcondition(self.obj236, rootNode)
    self.obj236.postAction( rootNode.CREATE )

    self.obj235=MT_pre__paired_with(self)
    self.obj235.isGraphObjectVisual = True

    if(hasattr(self.obj235, '_setHierarchicalLink')):
      self.obj235._setHierarchicalLink(False)

    # MT_label__
    self.obj235.MT_label__.setValue('3')

    # MT_pivotOut__
    self.obj235.MT_pivotOut__.setValue('')
    self.obj235.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj235.MT_subtypeMatching__.setValue(('True', 0))
    self.obj235.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj235.MT_pivotIn__.setValue('')
    self.obj235.MT_pivotIn__.setNone()

    self.obj235.graphClass_= graph_MT_pre__paired_with
    if self.genGraphics:
       new_obj = graph_MT_pre__paired_with(203.5,253.5,self.obj235)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__paired_with", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj235.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj235)
    self.globalAndLocalPostcondition(self.obj235, rootNode)
    self.obj235.postAction( rootNode.CREATE )

    self.obj239=MT_pre__match_contains(self)
    self.obj239.isGraphObjectVisual = True

    if(hasattr(self.obj239, '_setHierarchicalLink')):
      self.obj239._setHierarchicalLink(False)

    # MT_label__
    self.obj239.MT_label__.setValue('7')

    # MT_pivotOut__
    self.obj239.MT_pivotOut__.setValue('')
    self.obj239.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj239.MT_subtypeMatching__.setValue(('True', 0))
    self.obj239.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj239.MT_pivotIn__.setValue('')
    self.obj239.MT_pivotIn__.setNone()

    self.obj239.graphClass_= graph_MT_pre__match_contains
    if self.genGraphics:
       new_obj = graph_MT_pre__match_contains(304.5,163.5,self.obj239)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__match_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj239.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj239)
    self.globalAndLocalPostcondition(self.obj239, rootNode)
    self.obj239.postAction( rootNode.CREATE )

    self.obj240=MT_pre__apply_contains(self)
    self.obj240.isGraphObjectVisual = True

    if(hasattr(self.obj240, '_setHierarchicalLink')):
      self.obj240._setHierarchicalLink(False)

    # MT_label__
    self.obj240.MT_label__.setValue('8')

    # MT_pivotOut__
    self.obj240.MT_pivotOut__.setValue('')
    self.obj240.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj240.MT_subtypeMatching__.setValue(('True', 0))
    self.obj240.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj240.MT_pivotIn__.setValue('')
    self.obj240.MT_pivotIn__.setNone()

    self.obj240.graphClass_= graph_MT_pre__apply_contains
    if self.genGraphics:
       new_obj = graph_MT_pre__apply_contains(308.0,353.5,self.obj240)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__apply_contains", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj240.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj240)
    self.globalAndLocalPostcondition(self.obj240, rootNode)
    self.obj240.postAction( rootNode.CREATE )

    self.obj238=MT_pre__backward_link(self)
    self.obj238.isGraphObjectVisual = True

    if(hasattr(self.obj238, '_setHierarchicalLink')):
      self.obj238._setHierarchicalLink(False)

    # MT_label__
    self.obj238.MT_label__.setValue('6')

    # MT_pivotOut__
    self.obj238.MT_pivotOut__.setValue('')
    self.obj238.MT_pivotOut__.setNone()

    # MT_subtypeMatching__
    self.obj238.MT_subtypeMatching__.setValue(('True', 0))
    self.obj238.MT_subtypeMatching__.config = 0

    # MT_pivotIn__
    self.obj238.MT_pivotIn__.setValue('')
    self.obj238.MT_pivotIn__.setNone()

    self.obj238.graphClass_= graph_MT_pre__backward_link
    if self.genGraphics:
       new_obj = graph_MT_pre__backward_link(409.0,263.5,self.obj238)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("MT_pre__backward_link", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
    else: new_obj = None
    self.obj238.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj238)
    self.globalAndLocalPostcondition(self.obj238, rootNode)
    self.obj238.postAction( rootNode.CREATE )

    self.obj232=LHS(self)
    self.obj232.isGraphObjectVisual = True

    if(hasattr(self.obj232, '_setHierarchicalLink')):
      self.obj232._setHierarchicalLink(False)

    # constraint
    self.obj232.constraint.setValue('#===============================================================================\n# This code is executed after the nodes in the LHS have been matched.\n# You can access a matched node labelled n by: PreNode(\'n\').\n# To access attribute x of node n, use: PreNode(\'n\')[\'x\'].\n# The given constraint must evaluate to a boolean expression:\n#    returning True enables the rule to be applied,\n#    returning False forbids the rule from being applied.\n#===============================================================================\n\nreturn True\n')
    self.obj232.constraint.setHeight(15)

    self.obj232.graphClass_= graph_LHS
    if self.genGraphics:
       new_obj = graph_LHS(20.0,40.0,self.obj232)
       new_obj.DrawObject(self.UMLmodel)
       self.UMLmodel.addtag_withtag("LHS", new_obj.tag)
       new_obj.layConstraints = dict() # Graphical Layout Constraints 
       new_obj.layConstraints['scale'] = [1.0, 1.0]
    else: new_obj = None
    self.obj232.graphObject_ = new_obj

    # Add node to the root: rootNode
    rootNode.addNode(self.obj232)
    self.globalAndLocalPostcondition(self.obj232, rootNode)
    self.obj232.postAction( rootNode.CREATE )

    # Connections for obj233 (graphObject_: Obj77) of type MT_pre__MatchModel
    self.drawConnections(
(self.obj233,self.obj235,[199.0, 133.0, 203.5, 253.5],"true", 2),
(self.obj233,self.obj239,[199.0, 133.0, 304.5, 163.5],"true", 2) )
    # Connections for obj234 (graphObject_: Obj78) of type MT_pre__ApplyModel
    self.drawConnections(
(self.obj234,self.obj240,[208.0, 374.0, 308.0, 353.5],"true", 2) )
    # Connections for obj237 (graphObject_: Obj81) of type MT_pre__ECU
    self.drawConnections(
 )
    # Connections for obj236 (graphObject_: Obj80) of type MT_pre__CompositionType
    self.drawConnections(
(self.obj236,self.obj238,[408.0, 333.0, 409.0, 263.5],"true", 2) )
    # Connections for obj235 (graphObject_: Obj79) of type MT_pre__paired_with
    self.drawConnections(
(self.obj235,self.obj234,[203.5, 253.5, 208.0, 374.0],"true", 2) )
    # Connections for obj239 (graphObject_: Obj83) of type MT_pre__match_contains
    self.drawConnections(
(self.obj239,self.obj237,[304.5, 163.5, 410.0, 194.0],"true", 2) )
    # Connections for obj240 (graphObject_: Obj84) of type MT_pre__apply_contains
    self.drawConnections(
(self.obj240,self.obj236,[308.0, 353.5, 408.0, 333.0],"true", 2) )
    # Connections for obj238 (graphObject_: Obj82) of type MT_pre__backward_link
    self.drawConnections(
(self.obj238,self.obj237,[409.0, 263.5, 410.0, 194.0],"true", 2) )
    # Connections for obj232 (graphObject_: Obj76) of type LHS
    self.drawConnections(
 )

newfunction = ConnectPPortPrototype_Back_CompositionType2ECU_MDL

loadedMMName = ['MT_pre__GM2AUTOSAR_MM_META', 'MoTifRule_META']

atom3version = '0.3'
